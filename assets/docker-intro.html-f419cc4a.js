import{_ as l,r as i,o as c,c as o,a as n,b as s,d as t,e as a}from"./app-8248290e.js";const r={},p=a('<h2 id="一、快速入门" tabindex="-1"><a class="header-anchor" href="#一、快速入门" aria-hidden="true">#</a> 一、快速入门</h2><h3 id="_1-1-docker前置知识" tabindex="-1"><a class="header-anchor" href="#_1-1-docker前置知识" aria-hidden="true">#</a> 1.1.Docker前置知识</h3><p>要知道，<strong>不同操作系统下其安装包、运行环境是都不相同的</strong>！如果是<strong>手动安装，必须手动解决安装包不同、环境不同的、配置不同的问题</strong>！</p><p>而使用Docker，这些完全不用考虑。就是因为Docker会自动搜索并下载MySQL。注意：这里下载的不是安装包，而是<strong>镜像。<strong>镜像中不仅包含了MySQL本身，还包含了其运行所需要的环境、配置、系统级函数库。因此它在运行时就有自己独立的环境，就可以跨系统运行，也不需要手动再次配置环境了。这套独立运行的隔离环境我们称为</strong>容器</strong>。</p><p>说明：</p><ul><li>镜像：英文是image</li><li>容器：英文是container</li></ul>',6),d=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"因此，Docker安装软件的过程，就是自动搜索下载镜像，然后创建并运行容器的过程。")],-1),m=n("p",null,"Docker会根据命令中的镜像名称自动搜索并下载镜像。",-1),u=n("p",null,"Docker官方提供了一个专门管理、存储镜像的网站，并对外开放了镜像上传、下载的权利。Docker官方提供了一些基础镜像，然后各大软件公司又在基础镜像基础上，制作了自家软件的镜像，全部都存放在这个网站。这个网站就成了Docker镜像交流的社区：",-1),v={href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"},k=a(`<p>基本上我们常用的各种软件都能在这个网站上找到，我们甚至可以自己制作镜像上传上去。</p><p>像这种提供存储、管理Docker镜像的服务器，被称为DockerRegistry，可以翻译为镜像仓库。</p><h3 id="_1-2命令解读" tabindex="-1"><a class="header-anchor" href="#_1-2命令解读" aria-hidden="true">#</a> 1.2命令解读</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">--name</span> mysql <span class="token punctuation">\\</span>
  <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Asia/Shanghai <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123</span> <span class="token punctuation">\\</span>
  mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>docker run</strong>：创建并运行一个容器，<strong>-d</strong>是让容器在后台运行</p></li><li><p><strong>--name mysql</strong>：给容器起个名字，必须唯一</p></li><li><p><strong>-p 3306:3306</strong>：设置端口映射</p><ul><li><strong>容器是隔离环境</strong>，外界不可访问。但是可以<strong>将宿主机端口映射容器内端口</strong>，当访问宿主机指定端口时，就是在访问容器内的端口了。</li><li>容器内端口往往是由容器内的进程决定，例如MySQL进程默认端口是3306，因此容器内端口一定是3306；而宿主机端口则可以任意指定，一般与容器内保持一致。</li><li>格式： <code>-p 宿主机端口:容器内端口</code>，示例中就是将宿主机的3306映射到容器内的3306端口</li></ul></li><li><p><strong>-e KEY=VALUE</strong>：设置环境变量</p><ul><li>格式：<code>-e KEY=VALUE</code>，KEY和VALUE都由容器内进程决定</li><li>案例中，<code>TZ=Asia/Shanghai</code>是设置时区；<code>MYSQL_ROOT_PASSWORD=123</code>是设置MySQL默认密码</li></ul></li><li><p><strong>mysql</strong>：指定运行的镜像的名字</p></li></ul><h3 id="_1-3-镜像命名规范" tabindex="-1"><a class="header-anchor" href="#_1-3-镜像命名规范" aria-hidden="true">#</a> 1.3.镜像命名规范</h3><ul><li>镜像名称一般由两部分组成：[repository]:[tag]。 <ul><li>其中repository就是镜像名</li><li>tag是镜像的版本</li></ul></li><li>在没有指定tag时，默认是latest，代表最新版本的镜像</li></ul><h2 id="二、docker基础" tabindex="-1"><a class="header-anchor" href="#二、docker基础" aria-hidden="true">#</a> 二、Docker基础</h2><h3 id="_2-1-常见命令" tabindex="-1"><a class="header-anchor" href="#_2-1-常见命令" aria-hidden="true">#</a> 2.1.常见命令</h3><p>首先来学习Docker中的常见命令，可以参考官方文档：</p>`,10),b={href:"https://docs.docker.com/engine/reference/commandline/cli/",target:"_blank",rel:"noopener noreferrer"},g=a(`<h4 id="_2-1-1-命令介绍" tabindex="-1"><a class="header-anchor" href="#_2-1-1-命令介绍" aria-hidden="true">#</a> 2.1.1.命令介绍</h4><table><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">docker pull</td><td style="text-align:center;">拉取镜像</td></tr><tr><td style="text-align:center;">docker push</td><td style="text-align:center;">推送镜像到DockerRegistry</td></tr><tr><td style="text-align:center;">docker images</td><td style="text-align:center;">查看本地镜像</td></tr><tr><td style="text-align:center;">docker rmi</td><td style="text-align:center;">删除本地镜像</td></tr><tr><td style="text-align:center;">docker run</td><td style="text-align:center;">创建并运行容器（不能重复创建）</td></tr><tr><td style="text-align:center;">docker stop</td><td style="text-align:center;">停止指定容器</td></tr><tr><td style="text-align:center;">docker start</td><td style="text-align:center;">启动指定容器</td></tr><tr><td style="text-align:center;">docker restart</td><td style="text-align:center;">重新启动容器</td></tr><tr><td style="text-align:center;">docker rm</td><td style="text-align:center;">删除指定容器</td></tr><tr><td style="text-align:center;">docker ps</td><td style="text-align:center;">查看容器</td></tr><tr><td style="text-align:center;">docker logs</td><td style="text-align:center;">查看容器运行日志</td></tr><tr><td style="text-align:center;">docker exec</td><td style="text-align:center;">进入容器</td></tr><tr><td style="text-align:center;">docker save</td><td style="text-align:center;">保存镜像到本地压缩文件</td></tr><tr><td style="text-align:center;">docker load</td><td style="text-align:center;">加载本地压缩文件到镜像</td></tr><tr><td style="text-align:center;">docker inspect</td><td style="text-align:center;">查看容器详细信息</td></tr></tbody></table><p>用一幅图来表示这些命令的关系：</p><p><img src="https://qingyuan-1316724565.cos.ap-beijing.myqcloud.com/picture/2023/11/16/17-39-29-image-20231116173929199-49873e.png" alt="image-20231116173929199"></p><p>补充：</p><p>默认情况下，每次重启虚拟机我们都需要手动启动Docker和Docker中的容器。通过命令可以实现开机自启：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Docker开机自启</span>
systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span>

<span class="token comment"># Docker容器开机自启</span>
<span class="token function">docker</span> update <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">[</span>容器名/容器id<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-2-演示" tabindex="-1"><a class="header-anchor" href="#_2-1-2-演示" aria-hidden="true">#</a> 2.1.2.演示</h4><p>以Nginx为例演示上述命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 第1步，去DockerHub查看nginx镜像仓库及相关信息</span>

<span class="token comment"># 第2步，拉取Nginx镜像</span>
<span class="token function">docker</span> pull nginx

<span class="token comment"># 第3步，查看镜像</span>
<span class="token function">docker</span> images
<span class="token comment"># 结果如下</span>
REPOSITORY           TAG            IMAGE ID       CREATED         SIZE
nginx                latest         605c77e624dd   <span class="token number">22</span> months ago   141MB

<span class="token comment"># 第4步，创建并允许Nginx容器</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> nginx <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 nginx

<span class="token comment"># 第5步，查看运行中容器</span>
<span class="token function">docker</span> <span class="token function">ps</span>
<span class="token comment"># 也可以加格式化方式访问，格式更加简洁</span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">--format</span> <span class="token string">&quot;table {{.ID}}<span class="token entity" title="\\t">\\t</span>{{.Image}}<span class="token entity" title="\\t">\\t</span>{{.Ports}}<span class="token entity" title="\\t">\\t</span>{{.Status}}<span class="token entity" title="\\t">\\t</span>{{.Names}}&quot;</span>

<span class="token comment"># 第6步，查看运行日志</span>
<span class="token function">docker</span> logs <span class="token parameter variable">-f</span> nginx

<span class="token comment"># 第7步，停止容器</span>
<span class="token function">docker</span> stop nginx

<span class="token comment"># 第8步，查看所有容器</span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span>

<span class="token comment"># 第9步，重启nginx容器</span>
<span class="token function">docker</span> start nginx

<span class="token comment"># 第10步，查看容器详细信息</span>
<span class="token function">docker</span> inspect nginx

<span class="token comment"># 第11步，进入容器，查看容器内目录</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> nginx <span class="token function">bash</span>

<span class="token comment"># 第12步，删除容器</span>
<span class="token function">docker</span> <span class="token function">rm</span> nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-3-命令别名" tabindex="-1"><a class="header-anchor" href="#_2-1-3-命令别名" aria-hidden="true">#</a> 2.1.3.命令别名</h4><p>给常用Docker命令起别名，方便我们访问：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 修改/root/.bashrc文件</span>
<span class="token function">vi</span> /root/.bashrc
内容如下：
<span class="token comment"># .bashrc</span>

<span class="token comment"># User specific aliases and functions</span>

<span class="token builtin class-name">alias</span> <span class="token assign-left variable">rm</span><span class="token operator">=</span><span class="token string">&#39;rm -i&#39;</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">cp</span><span class="token operator">=</span><span class="token string">&#39;cp -i&#39;</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">mv</span><span class="token operator">=</span><span class="token string">&#39;mv -i&#39;</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">dps</span><span class="token operator">=</span><span class="token string">&#39;docker ps --format &quot;table {{.ID}}\\t{{.Image}}\\t{{.Ports}}\\t{{.Status}}\\t{{.Names}}&quot;&#39;</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">dis</span><span class="token operator">=</span><span class="token string">&#39;docker images&#39;</span>

<span class="token comment"># Source global definitions</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> /etc/bashrc <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token builtin class-name">.</span> /etc/bashrc
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，执行命令使别名生效</p><blockquote><div class="language-PowerShell line-numbers-mode" data-ext="PowerShell"><pre class="language-PowerShell"><code>source /root/.bashrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><h3 id="_2-2-数据卷" tabindex="-1"><a class="header-anchor" href="#_2-2-数据卷" aria-hidden="true">#</a> 2.2.数据卷</h3><p>容器是隔离环境，容器内程序的文件、配置、运行时产生的容器都在容器内部，我们要读写容器内的文件非常不方便。因此，容器提供程序的运行环境，但是<strong>程序运行产生的数据、程序运行依赖的配置都应该与容器解耦。</strong></p><h4 id="_2-2-1-什么是数据卷" tabindex="-1"><a class="header-anchor" href="#_2-2-1-什么是数据卷" aria-hidden="true">#</a> 2.2.1.什么是数据卷</h4><p><strong>数据卷（volume）<strong>是一个虚拟目录，是</strong>容器内目录</strong>与<strong>宿主机目录</strong>之间映射的桥梁。</p><p>以Nginx为例，我们知道Nginx中有两个关键的目录：</p><ul><li><code>html</code>：放置一些静态资源</li><li><code>conf</code>：放置配置文件</li></ul><p>如果我们要让Nginx代理我们的静态资源，最好是放到<code>html</code>目录；如果我们要修改Nginx的配置，最好是找到<code>conf</code>下的<code>nginx.conf</code>文件。</p><p>但是，容器运行的Nginx所有的文件都在容器内部。所以我们必须利用数据卷将两个目录与宿主机目录关联，方便我们操作。如图：</p><p><img src="https://qingyuan-1316724565.cos.ap-beijing.myqcloud.com/picture/2023/11/18/20-38-25-image-20231118203825583-5223d2.png" alt="image-20231118203825583"></p><p>在上图中：</p><ul><li>我们创建了两个数据卷：<code>conf</code>、<code>html</code></li><li>Nginx容器内部的<code>conf</code>目录和<code>html</code>目录分别与两个数据卷关联。</li><li>而数据卷conf和html分别指向了宿主机的<code>/var/lib/docker/volumes/conf/_data</code>目录和<code>/var/lib/docker/volumes/html/_data</code>目录</li></ul><p>这样以来，容器内的<code>conf</code>和<code>html</code>目录就 与宿主机的<code>conf</code>和<code>html</code>目录关联起来，我们称为<strong>挂载</strong>。此时，我们操作宿主机的<code>/var/lib/docker/volumes/html/_data</code>就是在操作容器内的<code>/usr/share/nginx/html/_data</code>目录。只要我们将静态资源放入宿主机对应目录，就可以被Nginx代理了。</p>`,27),h=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("code",null,"/var/lib/docker/volumes"),s("这个目录就是默认的存放所有容器数据卷的目录，其下再根据数据卷名称创建新目录，格式为"),n("code",null,"/数据卷名/_data"),s("。")]),n("p",null,[n("strong",null,"为什么不让容器目录直接指向宿主机目录呢？")]),n("ul",null,[n("li",null,"因为直接指向宿主机目录就与宿主机强耦合了，如果切换了环境，宿主机目录就可能发生改变了。由于容器一旦创建，目录挂载就无法修改，这样容器就无法正常工作了。"),n("li",null,"但是容器指向数据卷，一个逻辑名称，而数据卷再指向宿主机目录，就不存在强耦合。如果宿主机目录发生改变了，只要改变数据卷与宿主机目录之间的映射关系即可。")]),n("p",null,[s("不过，我们通过由于数据卷目录比较深，不好寻找，通常我们也"),n("strong",null,"允许让容器直接与宿主机目录挂载而不使用数据卷"),s("，具体参考2.2.3小节。")])],-1),x=a(`<h4 id="_2-2-2-数据卷命令" tabindex="-1"><a class="header-anchor" href="#_2-2-2-数据卷命令" aria-hidden="true">#</a> 2.2.2.数据卷命令</h4><p>数据卷相关命令：</p><table><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">docker volume create</td><td style="text-align:center;">创建数据卷</td></tr><tr><td style="text-align:center;">docker volume ls</td><td style="text-align:center;">查看所有数据卷</td></tr><tr><td style="text-align:center;">docker volume rm</td><td style="text-align:center;">删除指定数据卷</td></tr><tr><td style="text-align:center;">docker volume inspect</td><td style="text-align:center;">查看某个数据卷详情</td></tr><tr><td style="text-align:center;">docker volume prune</td><td style="text-align:center;">清除数据卷</td></tr></tbody></table><p>注意：容器与数据卷的挂载要在创建容器时配置，对于创建好的容器，是不能设置数据卷的。而且<strong>创建容器的过程中，数据卷会自动创建</strong>。</p><p>演示nginx的html目录挂载</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 1.首先创建容器并指定数据卷，注意通过 -v 参数来指定数据卷</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> nginx <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token parameter variable">-v</span> html:/usr/share/nginx/html nginx

<span class="token comment"># 2.然后查看数据卷</span>
<span class="token function">docker</span> volume <span class="token function">ls</span>
<span class="token comment"># 结果</span>
DRIVER    VOLUME NAME
<span class="token builtin class-name">local</span>     29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f
<span class="token builtin class-name">local</span>     html

<span class="token comment"># 3.查看数据卷详情</span>
<span class="token function">docker</span> volume inspect html
<span class="token comment"># 结果</span>
<span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token string">&quot;CreatedAt&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;2023-11-18T05:28:11-08:00&quot;</span>,
        <span class="token string">&quot;Driver&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;local&quot;</span>,
        <span class="token string">&quot;Labels&quot;</span><span class="token builtin class-name">:</span> null,
        <span class="token string">&quot;Mountpoint&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;/var/lib/docker/volumes/html/_data&quot;</span>,
        <span class="token string">&quot;Name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;html&quot;</span>,
        <span class="token string">&quot;Options&quot;</span><span class="token builtin class-name">:</span> null,
        <span class="token string">&quot;Scope&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;local&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>

<span class="token comment"># 查看/var/lib/docker/volumes/html/_data目录</span>
ll /var/lib/docker/volumes/html/_data
<span class="token comment"># 可以看到与nginx的html目录内容一样，结果如下：</span>
总用量 <span class="token number">8</span>
-rwxrwxr-x. <span class="token number">1</span> root root <span class="token number">497</span> <span class="token number">12</span>月 <span class="token number">28</span> <span class="token number">2021</span> 50x.html
-rwxrwxr-x. <span class="token number">1</span> root root <span class="token number">615</span> <span class="token number">12</span>月 <span class="token number">28</span> <span class="token number">2021</span> index.html

<span class="token comment"># 5.进入该目录，并随意修改index.html内容</span>
<span class="token builtin class-name">cd</span> /var/lib/docker/volumes/html/_data
<span class="token function">vi</span> index.html

<span class="token comment"># 6.打开页面，查看效果</span>

<span class="token comment"># 7.进入容器内部，查看/usr/share/nginx/html目录内的文件是否变化</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> nginx <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：每一个不同的镜像，将来创建容器后内部有哪些目录可以挂载，可以参考DockerHub对应的页面</p><h4 id="_2-2-3-挂载本地目录或文件" tabindex="-1"><a class="header-anchor" href="#_2-2-3-挂载本地目录或文件" aria-hidden="true">#</a> 2.2.3.挂载本地目录或文件</h4><p>可以发现，数据卷的目录结构较深，如果我们去操作数据卷目录会不太方便。在很多情况下，我们会直接将容器目录与宿主机指定目录挂载。挂载语法与数据卷类似：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 挂载本地目录</span>
<span class="token parameter variable">-v</span> 本地目录:容器目录
<span class="token comment"># 挂载本地文件</span>
<span class="token parameter variable">-v</span> 本地文件:容器内文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：本地目录或文件必须以<code>/</code>或<code>./</code>开头，如果直接以名字开头，会被识别为数据卷名而非本地目录名。</p><p>例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-v</span> mysql:/var/lib/mysql <span class="token comment"># 会被识别为一个数据卷叫mysql，运行时会自动创建这个数据卷</span>
<span class="token parameter variable">-v</span> ./mysql:/var/lib/mysql <span class="token comment"># 会被识别为当前目录下的mysql目录，运行时如果不存在会创建目录</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>演示</strong>，删除并重新创建mysql容器，并完成本地目录挂载：</p><ul><li>挂载<code>/root/mysql/data</code>到容器内的<code>/var/lib/mysql</code>目录</li><li>挂载<code>/root/mysql/init</code>到容器内的<code>/docker-entrypoint-initdb.d</code>目录（初始化的SQL脚本目录）</li><li>挂载<code>/root/mysql/conf</code>到容器内的<code>/etc/mysql/conf.d</code>目录（这个是MySQL配置文件目录）</li></ul><p>本地目录挂载</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 1.删除原来的MySQL容器</span>
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> mysql

<span class="token comment"># 2.进入root目录</span>
<span class="token builtin class-name">cd</span> ~

<span class="token comment"># 3.创建并运行mysql新容器，挂载本地目录</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
	<span class="token parameter variable">--name</span> mysql <span class="token punctuation">\\</span>
	<span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token punctuation">\\</span>
	<span class="token parameter variable">-e</span> <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Asia/Shanghai <span class="token punctuation">\\</span>
	<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\\</span>
	<span class="token parameter variable">-v</span> ./mysql/data:/var/lib/mysql <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> ./mysql/conf:/etc/mysql/conf.d <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> ./mysql/init:/docker-entrypoint-initdb.d <span class="token punctuation">\\</span>
  mysql
 
<span class="token comment"># 4.查看root目录，可以发现~/mysql/data目录已经自动创建好了</span>
<span class="token function">ls</span> <span class="token parameter variable">-l</span> mysql
<span class="token comment"># 结果：</span>
总用量 <span class="token number">4</span>
drwxr-xr-x. <span class="token number">2</span> root    root   <span class="token number">20</span> <span class="token number">11</span>月 <span class="token number">18</span> 06:55 conf
drwxr-xr-x. <span class="token number">7</span> polkitd root <span class="token number">4096</span> <span class="token number">11</span>月 <span class="token number">18</span> 07:16 data
drwxr-xr-x. <span class="token number">2</span> root    root   <span class="token number">23</span> <span class="token number">11</span>月 <span class="token number">18</span> 06:55 init
<span class="token comment"># 查看data目录，会发现里面有大量数据库数据，说明数据库完成了初始化</span>
<span class="token function">ls</span> <span class="token parameter variable">-l</span> data

<span class="token comment"># 5.查看MySQL容器内数据</span>
<span class="token comment"># 5.1.进入MySQL</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p123456</span>
<span class="token comment"># 5.2.查看编码表</span>
show variables like <span class="token string">&quot;%char%&quot;</span><span class="token punctuation">;</span>
<span class="token comment"># 5.3.结果，发现编码是utf8mb4没有问题</span>
+--------------------------+--------------------------------+
<span class="token operator">|</span> Variable_name            <span class="token operator">|</span> Value                          <span class="token operator">|</span>
+--------------------------+--------------------------------+
<span class="token operator">|</span> character_set_client     <span class="token operator">|</span> utf8mb4                        <span class="token operator">|</span>
<span class="token operator">|</span> character_set_connection <span class="token operator">|</span> utf8mb4                        <span class="token operator">|</span>
<span class="token operator">|</span> character_set_database   <span class="token operator">|</span> utf8mb4                        <span class="token operator">|</span>
<span class="token operator">|</span> character_set_filesystem <span class="token operator">|</span> binary                         <span class="token operator">|</span>
<span class="token operator">|</span> character_set_results    <span class="token operator">|</span> utf8mb4                        <span class="token operator">|</span>
<span class="token operator">|</span> character_set_server     <span class="token operator">|</span> utf8mb4                        <span class="token operator">|</span>
<span class="token operator">|</span> character_set_system     <span class="token operator">|</span> utf8mb3                        <span class="token operator">|</span>
<span class="token operator">|</span> character_sets_dir       <span class="token operator">|</span> /usr/share/mysql-8.0/charsets/ <span class="token operator">|</span>
+--------------------------+--------------------------------+

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-镜像" tabindex="-1"><a class="header-anchor" href="#_2-3-镜像" aria-hidden="true">#</a> 2.3.镜像</h3><p>之前一直在使用别人准备好的镜像，如果我们要部署一个Java项目，就要把它打包为一个镜像。</p><h4 id="_2-3-1-镜像结构" tabindex="-1"><a class="header-anchor" href="#_2-3-1-镜像结构" aria-hidden="true">#</a> 2.3.1.镜像结构</h4><p>要想自己构建镜像，必须先了解镜像的结构。</p><p>之前说过，镜像之所以能让我们快速跨操作系统部署应用而忽略其运行环境、配置，就是因为镜像中包含了程序运行需要的系统函数库、环境、配置、依赖。</p><p>因此，自定义镜像本质就是依次准备好程序运行的基础环境、依赖、应用本身、运行配置等文件，并且打包而成。</p><p>举个例子，我们要从0部署一个Java应用，大概流程是这样：</p><ul><li>准备一个linux服务（CentOS或者Ubuntu均可）</li><li>安装并配置JDK</li><li>上传Jar包</li><li>运行jar包</li></ul><p>那因此，我们打包镜像也是分这么几步：</p><ul><li>准备Linux运行环境（Java项目并不需要完整的操作系统，仅仅是基础运行环境即可）</li><li>安装并配置JDK</li><li>拷贝jar包</li><li>配置启动脚本</li></ul><p>上述步骤中的每一次操作其实都是在生产一些文件（系统运行环境、函数库、配置最终都是磁盘文件），所以<strong>镜像就是一堆文件的集合</strong>。</p><p>需要注意的是，镜像文件不是随意堆放的，而是按照操作的步骤分层叠加而成，每一层形成的文件都会单独打包并标记一个唯一id，称为<strong>Layer层</strong>。这样，如果我们构建时用到的某些层其他人已经制作过，就可以直接拷贝使用这些层，而不用重复制作。</p><p>例如，第一步中需要的Linux运行环境，通用性就很强，所以Docker官方就制作了这样的只包含Linux运行环境的镜像。我们在制作java镜像时，就无需重复制作，直接使用Docker官方提供的CentOS或Ubuntu镜像作为基础镜像。然后再搭建其它层即可，这样逐层搭建，最终整个Java项目的镜像结构如图所示：</p><p><img src="https://qingyuan-1316724565.cos.ap-beijing.myqcloud.com/picture/2023/11/19/20-41-11-download_image-ebbaed.png" alt="download_image"></p><h4 id="_2-3-2-dockerfile" tabindex="-1"><a class="header-anchor" href="#_2-3-2-dockerfile" aria-hidden="true">#</a> 2.3.2.Dockerfile</h4><p>由于制作镜像的过程中，需要逐层处理和打包，比较复杂，所以Docker就提供了自动打包镜像的功能。我们只需要将打包的过程，每一层要做的事情用固定的语法写下来，交给Docker去执行即可。</p><p>而这种记录镜像结构的文件就称为<strong>Dockerfile</strong>，其对应的语法可以参考官方文档：</p>`,34),y={href:"https://docs.docker.com/engine/reference/builder/",target:"_blank",rel:"noopener noreferrer"},f=a(`<p>其中的语法比较多，比较常用的有：</p><table><thead><tr><th style="text-align:center;">指令</th><th style="text-align:center;">说明</th><th style="text-align:center;">示例</th></tr></thead><tbody><tr><td style="text-align:center;">FROM</td><td style="text-align:center;">指定基础镜像</td><td style="text-align:center;">FROM centos:6</td></tr><tr><td style="text-align:center;">ENV</td><td style="text-align:center;">设置环境变量，可在后面指令使用</td><td style="text-align:center;">ENV key value</td></tr><tr><td style="text-align:center;">COPY</td><td style="text-align:center;">拷贝本地文件到镜像的指定目录</td><td style="text-align:center;">COPY ./xx.jar /tmp/app.jar</td></tr><tr><td style="text-align:center;">RUN</td><td style="text-align:center;">执行Linux的shell命令，一般是安装过程的命令</td><td style="text-align:center;">RUN yum install gcc</td></tr><tr><td style="text-align:center;">EXPOSE</td><td style="text-align:center;">指定容器运行时监听的端口，是给镜像使用者看的</td><td style="text-align:center;">EXPOSE 8080</td></tr><tr><td style="text-align:center;">ENTRYPOINT</td><td style="text-align:center;">镜像中应用的启动命令，容器运行时调用</td><td style="text-align:center;">ENTRYPOINT java -jar xx.jar</td></tr></tbody></table><p>例如，要基于Ubuntu镜像来构建一个Java应用，其Dockerfile内容如下：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token comment"># 指定基础镜像</span>
<span class="token instruction"><span class="token keyword">FROM</span> ubuntu:16.04</span>
<span class="token comment"># 配置环境变量，JDK的安装目录、容器内时区</span>
<span class="token instruction"><span class="token keyword">ENV</span> JAVA_DIR=/usr/local</span>
<span class="token instruction"><span class="token keyword">ENV</span> TZ=Asia/Shanghai</span>
<span class="token comment"># 拷贝jdk和java项目的包</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./jdk8.tar.gz <span class="token variable">$JAVA_DIR</span>/</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./docker-demo.jar /tmp/app.jar</span>
<span class="token comment"># 设定时区</span>
<span class="token instruction"><span class="token keyword">RUN</span> ln -snf /usr/share/zoneinfo/<span class="token variable">$TZ</span> /etc/localtime &amp;&amp; echo <span class="token variable">$TZ</span> &gt; /etc/timezone</span>
<span class="token comment"># 安装JDK</span>
<span class="token instruction"><span class="token keyword">RUN</span> cd <span class="token variable">$JAVA_DIR</span> <span class="token operator">\\</span>
 &amp;&amp; tar -xf ./jdk8.tar.gz <span class="token operator">\\</span>
 &amp;&amp; mv ./jdk1.8.0_144 ./java8</span>
<span class="token comment"># 配置环境变量</span>
<span class="token instruction"><span class="token keyword">ENV</span> JAVA_HOME=<span class="token variable">$JAVA_DIR</span>/java8</span>
<span class="token instruction"><span class="token keyword">ENV</span> PATH=<span class="token variable">$PATH</span>:<span class="token variable">$JAVA_HOME</span>/bin</span>
<span class="token comment"># 指定项目监听的端口</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 8080</span>
<span class="token comment"># 入口，java项目的启动命令</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">&quot;java&quot;</span>, <span class="token string">&quot;-jar&quot;</span>, <span class="token string">&quot;/app.jar&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以后我们会有很多很多java项目需要打包为镜像，他们都需要Linux系统环境、JDK环境这两层，只有上面的3层不同（因为jar包不同）。如果每次制作java镜像都重复制作前两层镜像，会很麻烦。</p><p>所以，就有人提供了基础的系统加JDK环境，我们在此基础上制作java镜像，就可以省去JDK的配置了：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token comment"># 基础镜像</span>
<span class="token instruction"><span class="token keyword">FROM</span> openjdk:11.0-jre-buster</span>
<span class="token comment"># 设定时区</span>
<span class="token instruction"><span class="token keyword">ENV</span> TZ=Asia/Shanghai</span>
<span class="token instruction"><span class="token keyword">RUN</span> ln -snf /usr/share/zoneinfo/<span class="token variable">$TZ</span> /etc/localtime &amp;&amp; echo <span class="token variable">$TZ</span> &gt; /etc/timezone</span>
<span class="token comment"># 拷贝jar包</span>
<span class="token instruction"><span class="token keyword">COPY</span> docker-demo.jar /app.jar</span>
<span class="token comment"># 入口</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">&quot;java&quot;</span>, <span class="token string">&quot;-jar&quot;</span>, <span class="token string">&quot;/app.jar&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-3-构建镜像" tabindex="-1"><a class="header-anchor" href="#_2-3-3-构建镜像" aria-hidden="true">#</a> 2.3.3.构建镜像</h4><p>当Dockerfile文件写好以后，就可以利用命令来构建镜像了。</p><p>在黑马资料中，准备好了一个demo项目及对应的Dockerfile</p><p><img src="https://qingyuan-1316724565.cos.ap-beijing.myqcloud.com/picture/2023/11/19/21-35-54-image-20231119213554316-74f51a.png" alt="image-20231119213554316"></p><p>首先，我们将课前资料提供的<code>docker-demo.jar</code>包以及<code>Dockerfile</code>拷贝到虚拟机的<code>/root/demo</code>目录：</p><p><img src="https://qingyuan-1316724565.cos.ap-beijing.myqcloud.com/picture/2023/11/19/21-33-59-image-20231119213359953-8d99f0.png" alt="image-20231119213359953"></p><p>然后，执行命令，构建镜像：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入镜像目录</span>
<span class="token builtin class-name">cd</span> /root/demo
<span class="token comment"># 开始构建</span>
<span class="token function">docker</span> build <span class="token parameter variable">-t</span> docker-demo:1.0 <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令说明：</p><ul><li><code>docker build </code>: 就是构建一个docker镜像</li><li><code>-t docker-demo:1.0</code> ：<code>-t</code>参数是指定镜像的名称（<code>repository</code>和<code>tag</code>）</li><li><code>.</code> : 最后的点是指构建时Dockerfile所在路径，由于我们进入了demo目录，所以指定的是<code>.</code>代表当前目录，也可以直接指定Dockerfile目录：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 直接指定Dockerfile目录</span>
<span class="token function">docker</span> build <span class="token parameter variable">-t</span> docker-demo:1.0 /root/demo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><p><img src="https://qingyuan-1316724565.cos.ap-beijing.myqcloud.com/picture/2023/11/19/21-39-37-image-20231119213937851-6f8339.png" alt="image-20231119213937851"></p><p>查看镜像列表：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看镜像列表：</span>
<span class="token function">docker</span> images
<span class="token comment"># 结果</span>
REPOSITORY           TAG               IMAGE ID       CREATED              SIZE
docker-demo          <span class="token number">1.0</span>           faa5bd837792   About a minute ago   319MB
nginx                latest            605c77e624dd   <span class="token number">22</span> months ago        141MB
redis                latest            7614ae9453d1   <span class="token number">23</span> months ago        113MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后尝试运行该镜像：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 1.创建并运行容器</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> <span class="token function">dd</span> <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 docker-demo:1.0
<span class="token comment"># 2.查看容器</span>
<span class="token function">docker</span> <span class="token function">ps</span>
<span class="token comment"># 结果</span>
CONTAINER ID   IMAGE         PORTS                                       STATUS          NAMES
d4acfd339953   docker-demo:1.0   <span class="token number">0.0</span>.0.0:8080-<span class="token operator">&gt;</span><span class="token number">8080</span>/tcp, :::8080-<span class="token operator">&gt;</span><span class="token number">8080</span>/tcp   Up <span class="token number">28</span> seconds   <span class="token function">dd</span>
88125387a5ae   nginx         <span class="token number">0.0</span>.0.0:80-<span class="token operator">&gt;</span><span class="token number">80</span>/tcp, :::80-<span class="token operator">&gt;</span><span class="token number">80</span>/tcp           Up <span class="token number">24</span> hours     nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-网络" tabindex="-1"><a class="header-anchor" href="#_2-4-网络" aria-hidden="true">#</a> 2.4.网络</h3><p>默认情况下，所有容器都是以bridge方式连接到Docker的一个虚拟网桥上：</p><p><img src="https://qingyuan-1316724565.cos.ap-beijing.myqcloud.com/picture/2023/11/19/22-36-29-image-20231119223629085-e334a1.png" alt="image-20231119223629085"></p><p>但是，容器的网络IP其实是一个虚拟的IP，其值并不固定与某一个容器绑定，如果我们在开发时写死某个IP，而在部署时容器的IP很可能会发生变化，连接会失败。</p><p>所以，我们必须借助于docker的网络功能来解决这个问题，官方文档：</p>`,29),_={href:"https://docs.docker.com/engine/reference/commandline/network/",target:"_blank",rel:"noopener noreferrer"},q=a(`<p>常见命令有：</p><table><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">docker network create</td><td style="text-align:center;">创建一个网络</td></tr><tr><td style="text-align:center;">docker network ls</td><td style="text-align:center;">查看所有网络</td></tr><tr><td style="text-align:center;">docker network rm</td><td style="text-align:center;">删除指定网络</td></tr><tr><td style="text-align:center;">docker network prune</td><td style="text-align:center;">清除未使用的网络</td></tr><tr><td style="text-align:center;">docker network connect</td><td style="text-align:center;">使指定容器连接加入某网络</td></tr><tr><td style="text-align:center;">docker network disconnect</td><td style="text-align:center;">使指定容器连接离开某网络</td></tr><tr><td style="text-align:center;">docker network inspect</td><td style="text-align:center;">查看网络详细信息</td></tr></tbody></table><p>演示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 1.首先通过命令创建一个网络</span>
<span class="token function">docker</span> network create hmall

<span class="token comment"># 2.然后查看网络</span>
<span class="token function">docker</span> network <span class="token function">ls</span>
<span class="token comment"># 结果：</span>
NETWORK ID     NAME      DRIVER    SCOPE
639bc44d0a87   bridge    bridge    <span class="token builtin class-name">local</span>
403f16ec62a2   hmall     bridge    <span class="token builtin class-name">local</span>
0dc0f72a0fbb   <span class="token function">host</span>      <span class="token function">host</span>      <span class="token builtin class-name">local</span>
cd8d3e8df47b   none      null      <span class="token builtin class-name">local</span>
<span class="token comment"># 其中，除了hmall以外，其它都是默认的网络</span>

<span class="token comment"># 3.让dd和mysql都加入该网络，注意，在加入网络时可以通过--alias给容器起别名</span>
<span class="token comment"># 这样该网络内的其它容器可以用别名互相访问！</span>
<span class="token comment"># 3.1.mysql容器，指定别名为db，另外每一个容器都有一个别名是容器名</span>
<span class="token function">docker</span> network connect hmall mysql <span class="token parameter variable">--alias</span> db
<span class="token comment"># 3.2.dd容器，也就是我们的java项目</span>
<span class="token function">docker</span> network connect hmall <span class="token function">dd</span>

<span class="token comment"># 4.进入dd容器，尝试利用别名访问db</span>
<span class="token comment"># 4.1.进入容器</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token function">dd</span> <span class="token function">bash</span>
<span class="token comment"># 4.2.用db别名访问</span>
<span class="token function">ping</span> db
<span class="token comment"># 结果</span>
PING db <span class="token punctuation">(</span><span class="token number">172.18</span>.0.2<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.
<span class="token number">64</span> bytes from mysql.hmall <span class="token punctuation">(</span><span class="token number">172.18</span>.0.2<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.070</span> ms
<span class="token number">64</span> bytes from mysql.hmall <span class="token punctuation">(</span><span class="token number">172.18</span>.0.2<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.056</span> ms
<span class="token comment"># 4.3.用容器名访问</span>
<span class="token function">ping</span> mysql
<span class="token comment"># 结果：</span>
PING mysql <span class="token punctuation">(</span><span class="token number">172.18</span>.0.2<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.
<span class="token number">64</span> bytes from mysql.hmall <span class="token punctuation">(</span><span class="token number">172.18</span>.0.2<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.044</span> ms
<span class="token number">64</span> bytes from mysql.hmall <span class="token punctuation">(</span><span class="token number">172.18</span>.0.2<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.054</span> ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OK，现在无需记住IP地址也可以实现容器互联了。</p>`,5),w=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"总结"),s("：")]),n("ul",null,[n("li",null,"在自定义网络中，可以给容器起多个别名，默认的别名是容器名本身"),n("li",null,"在同一个自定义网络中的容器，可以通过别名互相访问")])],-1);function D(E,j){const e=i("ExternalLinkIcon");return c(),o("div",null,[p,d,m,u,n("blockquote",null,[n("p",null,[n("a",v,[s("Docker Hub Container Image Library | App Containerization"),t(e)])])]),k,n("blockquote",null,[n("p",null,[n("a",b,[s("Use the Docker command line | Docker Docs"),t(e)])])]),g,h,x,n("blockquote",null,[n("p",null,[n("a",y,[s("Dockerfile reference | Docker Docs"),t(e)])])]),f,n("blockquote",null,[n("p",null,[n("a",_,[s("docker network | Docker Docs"),t(e)])])]),q,w])}const S=l(r,[["render",D],["__file","docker-intro.html.vue"]]);export{S as default};
