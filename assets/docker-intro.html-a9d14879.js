import{_ as a,o as s,c as n,e}from"./app-9b26a8d7.js";const l={},i=e(`<h2 id="命令解读" tabindex="-1"><a class="header-anchor" href="#命令解读" aria-hidden="true">#</a> 命令解读</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">--name</span> mysql <span class="token punctuation">\\</span>
  <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Asia/Shanghai <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123</span> <span class="token punctuation">\\</span>
  mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>docker run</strong>：创建并运行一个容器，<strong>-d</strong>是让容器在后台运行</p></li><li><p><strong>--name mysql</strong>：给容器起个名字，必须唯一</p></li><li><p><strong>-p 3306:3306</strong>：设置端口映射</p><ul><li><strong>容器是隔离环境</strong>，外界不可访问。但是可以<strong>将宿主机端口映射容器内端口</strong>，当访问宿主机指定端口时，就是在访问容器内的端口了。</li><li>容器内端口往往是由容器内的进程决定，例如MySQL进程默认端口是3306，因此容器内端口一定是3306；而宿主机端口则可以任意指定，一般与容器内保持一致。</li><li>格式： <code>-p 宿主机端口:容器内端口</code>，示例中就是将宿主机的3306映射到容器内的3306端口</li></ul></li><li><p><strong>-e KEY=VALUE</strong>：设置环境变量</p><ul><li>格式：<code>-e KEY=VALUE</code>，KEY和VALUE都由容器内进程决定</li><li>案例中，<code>TZ=Asia/Shanghai</code>是设置时区；<code>MYSQL_ROOT_PASSWORD=123</code>是设置MySQL默认密码</li></ul></li><li><p><strong>mysql</strong>：指定运行的镜像的名字</p></li></ul><h2 id="镜像命名规范" tabindex="-1"><a class="header-anchor" href="#镜像命名规范" aria-hidden="true">#</a> 镜像命名规范</h2><ul><li>镜像名称一般由两部分组成：[repository]:[tag]。 <ul><li>其中repository就是镜像名</li><li>tag是镜像的版本</li></ul></li><li>在没有指定tag时，默认是latest，代表最新版本的镜像</li></ul>`,5),t=[i];function r(o,c){return s(),n("div",null,t)}const d=a(l,[["render",r],["__file","docker-intro.html.vue"]]);export{d as default};
