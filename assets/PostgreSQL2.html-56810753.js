import{_ as s,o as a,c as e,b as n,a as p}from"./app-25871fd1.js";const t={},o=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"接上篇")],-1),l=p(`<h2 id="order-by-语句" tabindex="-1"><a class="header-anchor" href="#order-by-语句" aria-hidden="true">#</a> ORDER BY 语句</h2><p>在 PostgreSQL 中，<strong>ORDER BY</strong> 用于对一列或者多列数据进行升序（ASC）或者降序（DESC）排列。</p><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h3><p><strong>ORDER BY</strong> 子句的基础语法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">column</span><span class="token operator">-</span>list
<span class="token keyword">FROM</span> table_name
<span class="token punctuation">[</span><span class="token keyword">WHERE</span> condition<span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> columnN<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以在 ORDER BY 中使用一列或者多列，但是必须保证要排序的列必须存在。</p><p><strong>ASC</strong> 表示升序，<strong>DESC</strong> 表示降序。</p><h3 id="实例" tabindex="-1"><a class="header-anchor" href="#实例" aria-hidden="true">#</a> 实例</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- The default order is from low to high.</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> sales_item <span class="token keyword">WHERE</span> discount <span class="token operator">&gt;</span> <span class="token number">.15</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> discount<span class="token punctuation">;</span>

<span class="token comment">-- The following gives results from high to low</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> sales_item <span class="token keyword">WHERE</span> discount <span class="token operator">&gt;</span> <span class="token number">.15</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> discount <span class="token keyword">DESC</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="limit-子句" tabindex="-1"><a class="header-anchor" href="#limit-子句" aria-hidden="true">#</a> LIMIT 子句</h2><p>PostgreSQL 中的 <strong>limit</strong> 子句用于限制 SELECT 语句中查询的数据的数量。</p><h3 id="语法-1" tabindex="-1"><a class="header-anchor" href="#语法-1" aria-hidden="true">#</a> 语法</h3><p>带有 LIMIT 子句的 SELECT 语句的基本语法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> columnN
<span class="token keyword">FROM</span> table_name
<span class="token keyword">LIMIT</span> <span class="token punctuation">[</span><span class="token keyword">no</span> <span class="token keyword">of</span> <span class="token keyword">rows</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是 LIMIT 子句与 OFFSET 子句(偏移量)一起使用时的语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> columnN 
<span class="token keyword">FROM</span> table_name
<span class="token keyword">LIMIT</span> <span class="token punctuation">[</span><span class="token keyword">no</span> <span class="token keyword">of</span> <span class="token keyword">rows</span><span class="token punctuation">]</span> <span class="token keyword">OFFSET</span> <span class="token punctuation">[</span><span class="token keyword">row</span> num<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实例-1" tabindex="-1"><a class="header-anchor" href="#实例-1" aria-hidden="true">#</a> 实例</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- LIMIT limits the number of rows in the result. Get just the top 5. You could use LIMIT 5, 10 to get the next 5</span>

<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> sales_item <span class="token keyword">WHERE</span> discount <span class="token operator">&gt;</span> <span class="token number">.15</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> discount <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> <span class="token number">5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="having-子句" tabindex="-1"><a class="header-anchor" href="#having-子句" aria-hidden="true">#</a> HAVING 子句</h2><p>HAVING 子句可以让我们筛选分组后的各组数据。</p><p>WHERE 子句在所选列上设置条件，而 HAVING 子句则在由 GROUP BY 子句创建的分组上设置条件。</p><h3 id="语法-2" tabindex="-1"><a class="header-anchor" href="#语法-2" aria-hidden="true">#</a> 语法</h3><p>下面是 HAVING 子句在 SELECT 查询中的位置：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
<span class="token keyword">FROM</span>
<span class="token keyword">WHERE</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>
<span class="token keyword">HAVING</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HAVING 子句必须放置于 GROUP BY 子句后面，ORDER BY 子句前面，下面是 HAVING 子句在 SELECT 语句中基础语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2
<span class="token keyword">FROM</span> table1<span class="token punctuation">,</span> table2
<span class="token keyword">WHERE</span> <span class="token punctuation">[</span> conditions <span class="token punctuation">]</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> column1<span class="token punctuation">,</span> column2
<span class="token keyword">HAVING</span> <span class="token punctuation">[</span> conditions <span class="token punctuation">]</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> column1<span class="token punctuation">,</span> column2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实例-2" tabindex="-1"><a class="header-anchor" href="#实例-2" aria-hidden="true">#</a> 实例</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> EXTRACT<span class="token punctuation">(</span><span class="token keyword">MONTH</span> <span class="token keyword">FROM</span> birth_date<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token keyword">Month</span><span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>
<span class="token keyword">FROM</span> customer
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">Month</span>
<span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token keyword">Month</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="group-by-语句" tabindex="-1"><a class="header-anchor" href="#group-by-语句" aria-hidden="true">#</a> GROUP BY 语句</h2><p>在 PostgreSQL 中，<strong>GROUP BY</strong> 语句和 SELECT 语句一起使用，用来对相同的数据进行分组。</p><p>GROUP BY 在一个 SELECT 语句中，放在 WHRER 子句的后面，ORDER BY 子句的前面。</p><h3 id="语法-3" tabindex="-1"><a class="header-anchor" href="#语法-3" aria-hidden="true">#</a> 语法</h3><p>下面给出了 GROUP BY 子句的基本语法:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">column</span><span class="token operator">-</span>list
<span class="token keyword">FROM</span> table_name
<span class="token keyword">WHERE</span> <span class="token punctuation">[</span> conditions <span class="token punctuation">]</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>columnN
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>columnN
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>GROUP BY 子句必须放在 WHERE 子句中的条件之后，必须放在 ORDER BY 子句之前。</p><p>在 GROUP BY 子句中，你可以对一列或者多列进行分组，但是被分组的列必须存在于列清单中。</p><h3 id="实例-3" tabindex="-1"><a class="header-anchor" href="#实例-3" aria-hidden="true">#</a> 实例</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> product_id<span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">AS</span> Total <span class="token keyword">FROM</span> item <span class="token keyword">WHERE</span> product_id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> product_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="distinct-关键字" tabindex="-1"><a class="header-anchor" href="#distinct-关键字" aria-hidden="true">#</a> DISTINCT 关键字</h2><p>在 PostgreSQL 中，DISTINCT 关键字与 SELECT 语句一起使用，用于去除重复记录，只获取唯一的记录。</p><p>我们平时在操作数据时，有可能出现一种情况，在一个表中有多个重复的记录，当提取这样的记录时，DISTINCT 关键字就显得特别有意义，它只获取唯一一次记录，而不是获取重复记录。</p><h3 id="语法-4" tabindex="-1"><a class="header-anchor" href="#语法-4" aria-hidden="true">#</a> 语法</h3><p>用于去除重复记录的 DISTINCT 关键字的基本语法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>columnN
<span class="token keyword">FROM</span> table_name
<span class="token keyword">WHERE</span> <span class="token punctuation">[</span>condition<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实例-4" tabindex="-1"><a class="header-anchor" href="#实例-4" aria-hidden="true">#</a> 实例</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- The IN phrase can be used to test if a value is in a list. Find customer states that are in my list. You can also use NOT IN.</span>
 
<span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> state
<span class="token keyword">FROM</span> customer
<span class="token keyword">WHERE</span> state <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">&#39;CA&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;NJ&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> state<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="连接-join" tabindex="-1"><a class="header-anchor" href="#连接-join" aria-hidden="true">#</a> 连接(JOIN)</h2><p>PostgreSQL JOIN 子句用于把来自两个或多个表的行结合起来，基于这些表之间的共同字段。</p><p>在 PostgreSQL 中，JOIN 有五种连接类型：</p><ul><li>CROSS JOIN ：交叉连接</li><li>INNER JOIN：内连接</li><li>LEFT OUTER JOIN：左外连接</li><li>RIGHT OUTER JOIN：右外连接</li><li>FULL OUTER JOIN：全外连接</li></ul><h3 id="内连接" tabindex="-1"><a class="header-anchor" href="#内连接" aria-hidden="true">#</a> 内连接</h3><p>内连接（INNER JOIN）根据连接谓词结合两个表（table1 和 table2）的列值来创建一个新的结果表。查询会把 table1 中的每一行与 table2 中的每一行进行比较，找到所有满足连接谓词的行的匹配对。</p><p>当满足连接谓词时，A 和 B 行的每个匹配对的列值会合并成一个结果行。</p><p>内连接（INNER JOIN）是最常见的连接类型，是默认的连接类型。</p><p>INNER 关键字是可选的。</p><p>下面是内连接（INNER JOIN）的语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> table1<span class="token punctuation">.</span>column1<span class="token punctuation">,</span> table2<span class="token punctuation">.</span>column2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">FROM</span> table1
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> table2
<span class="token keyword">ON</span> table1<span class="token punctuation">.</span>common_filed <span class="token operator">=</span> table2<span class="token punctuation">.</span>common_field<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- You can define multiple join conditions with logical operators : </span>
<span class="token keyword">SELECT</span> item_id<span class="token punctuation">,</span> price
<span class="token keyword">FROM</span> item <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> sales_item
<span class="token keyword">ON</span> item<span class="token punctuation">.</span>id <span class="token operator">=</span> sales_item<span class="token punctuation">.</span>item_id
<span class="token operator">AND</span> price <span class="token operator">&gt;</span> <span class="token number">120.00</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> item_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="交叉连接" tabindex="-1"><a class="header-anchor" href="#交叉连接" aria-hidden="true">#</a> 交叉连接</h3><p>交叉连接（CROSS JOIN）把第一个表的每一行与第二个表的每一行进行匹配。如果两个输入表分别有 x 和 y 行，则结果表有 x*y 行。</p><p>由于交叉连接（CROSS JOIN）有可能产生非常大的表，使用时必须谨慎，只在适当的时候使用它们。</p><p>下面是 CROSS JOIN 的基础语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> table1 <span class="token keyword">CROSS</span> <span class="token keyword">JOIN</span> table2 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>实例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> sales_order_id<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> product_id
<span class="token keyword">FROM</span> item <span class="token keyword">CROSS</span> <span class="token keyword">JOIN</span> sales_item
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> sales_order_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="左外连接" tabindex="-1"><a class="header-anchor" href="#左外连接" aria-hidden="true">#</a> 左外连接</h3><p>外部连接是内部连接的扩展。SQL 标准定义了三种类型的外部连接: LEFT、RIGHT 和 FULL, PostgreSQL 支持所有这些。</p><p>对于左外连接，首先执行一个内连接。然后，对于表 T1 中不满足表 T2 中连接条件的每一行，其中 T2 的列中有 null 值也会添加一个连接行。因此，连接的表在 T1 中每一行至少有一行。</p><p>下面是左外连接（ LEFT OUTER JOIN ）的基础语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> table1 <span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> table2 <span class="token keyword">ON</span> conditional_expression <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>实例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> supplier<span class="token punctuation">,</span> price
<span class="token keyword">FROM</span> product <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> item
<span class="token keyword">ON</span> item<span class="token punctuation">.</span>product_id <span class="token operator">=</span> product<span class="token punctuation">.</span>id
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="union-操作符" tabindex="-1"><a class="header-anchor" href="#union-操作符" aria-hidden="true">#</a> UNION 操作符</h2><p>PostgreSQL UNION 操作符合并两个或多个 SELECT 语句的结果。</p><p>UNION 操作符用于合并两个或多个 SELECT 语句的结果集。</p><p>请注意，UNION 内部的每个 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每个 SELECT 语句中的列的顺序必须相同。</p><h3 id="语法-5" tabindex="-1"><a class="header-anchor" href="#语法-5" aria-hidden="true">#</a> 语法</h3><p>UNIONS 基础语法如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT column1 [, column2 ]
FROM table1 [, table2 ]
[WHERE condition]

UNION

SELECT column1 [, column2 ]
FROM table1 [, table2 ]
[WHERE condition]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的条件语句可以根据您的需要设置任何表达式。</p><h3 id="实例-5" tabindex="-1"><a class="header-anchor" href="#实例-5" aria-hidden="true">#</a> 实例</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 假设我们想给所有客户和销售人员发送12月份的生日贺卡，我们可以这样做。总是把Order By语句放在最后。列名取自第一个选择语句中提供的列名。(我们使用Extract来获取从出生日期开始的月份)</span>
<span class="token keyword">SELECT</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> street<span class="token punctuation">,</span> city<span class="token punctuation">,</span> zip<span class="token punctuation">,</span> birth_date
<span class="token keyword">FROM</span> customer
<span class="token keyword">WHERE</span> EXTRACT<span class="token punctuation">(</span><span class="token keyword">MONTH</span> <span class="token keyword">FROM</span> birth_date<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">12</span>
<span class="token keyword">UNION</span>
<span class="token keyword">SELECT</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> street<span class="token punctuation">,</span> city<span class="token punctuation">,</span> zip<span class="token punctuation">,</span> birth_date
<span class="token keyword">FROM</span> sales_person
<span class="token keyword">WHERE</span> EXTRACT<span class="token punctuation">(</span><span class="token keyword">MONTH</span> <span class="token keyword">FROM</span> birth_date<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">12</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> birth_date<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="view-视图" tabindex="-1"><a class="header-anchor" href="#view-视图" aria-hidden="true">#</a> View（视图）</h2><p>View（视图）是一张假表，只不过是通过相关的名称存储在数据库中的一个 PostgreSQL 语句。</p><p>View（视图）实际上是一个以预定义的 PostgreSQL 查询形式存在的表的组合。</p><p>View（视图）可以包含一个表的所有行或从一个或多个表选定行。</p><p>View（视图）可以从一个或多个表创建，这取决于要创建视图的 PostgreSQL 查询。</p><p>View（视图）是一种虚拟表，允许用户实现以下几点：</p><ul><li>用户或用户组认为更自然或直观查找结构数据的方式。</li><li>限制数据访问，用户只能看到有限的数据，而不是完整的表。</li><li>汇总各种表中的数据，用于生成报告。</li></ul><p>PostgreSQL 视图是只读的，因此可能无法在视图上执行 DELETE、INSERT 或 UPDATE 语句。但是可以在视图上创建一个触发器，当尝试 DELETE、INSERT 或 UPDATE 视图时触发，需要做的动作在触发器内容中定义。</p><h3 id="create-view-创建视图" tabindex="-1"><a class="header-anchor" href="#create-view-创建视图" aria-hidden="true">#</a> CREATE VIEW（创建视图）</h3><p>在 PostgreSQL 用 CREATE VIEW 语句创建视图，视图创建可以从一张表，多张表或者其他视图。</p><p>CREATE VIEW 基础语法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token punctuation">[</span><span class="token keyword">TEMP</span> <span class="token operator">|</span> <span class="token keyword">TEMPORARY</span><span class="token punctuation">]</span> <span class="token keyword">VIEW</span> view_name <span class="token keyword">AS</span>
<span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">FROM</span> table_name
<span class="token keyword">WHERE</span> <span class="token punctuation">[</span>condition<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以在 SELECT 语句中包含多个表，这与在正常的 SQL SELECT 查询中的方式非常相似。如果使用了可选的 TEMP 或 TEMPORARY 关键字，则将在临时数据库中创建视图。</p><h3 id="实例-6" tabindex="-1"><a class="header-anchor" href="#实例-6" aria-hidden="true">#</a> 实例</h3><p>现在，下面是一个从 COMPANY 表创建视图的实例。视图只从 COMPANY 表中选取几列：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> COMPANY_VIEW <span class="token keyword">AS</span>
<span class="token keyword">SELECT</span> ID<span class="token punctuation">,</span> NAME<span class="token punctuation">,</span> AGE
<span class="token keyword">FROM</span>  COMPANY<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，可以查询 COMPANY_VIEW，与查询实际表的方式类似。下面是实例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> COMPANY_VIEW<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="drop-view-删除视图" tabindex="-1"><a class="header-anchor" href="#drop-view-删除视图" aria-hidden="true">#</a> DROP VIEW （删除视图）</h3><p>要删除视图，只需使用带有 view_name 的 DROP VIEW 语句。DROP VIEW 的基本语法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> view_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="sql-functions" tabindex="-1"><a class="header-anchor" href="#sql-functions" aria-hidden="true">#</a> SQL Functions</h2><p>您可以编写类似于传统编程语言的程序。有不同类型的存储程序。存储函数可以通过SQL语句执行。</p><p>创建函数后，它们出现在functions文件夹中。你可以通过使用函数的属性来查看函数的信息。</p><p><img src="https://qingyuan-1316724565.cos.ap-beijing.myqcloud.com/picture/2023/12/07/22-08-49-image-20231207220849740-5d0d6d.png" alt="image-20231207220849740"></p><p>实例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">FUNCTION</span> fn_add_ints<span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> 
<span class="token keyword">RETURNS</span> <span class="token keyword">int</span> <span class="token keyword">as</span>
$body$
    <span class="token comment">--$1 refers to 1st parameter and $2 the 2nd</span>
    <span class="token keyword">SELECT</span> $<span class="token number">1</span> <span class="token operator">+</span> $<span class="token number">2</span><span class="token punctuation">;</span>
$body$
<span class="token keyword">LANGUAGE</span> <span class="token keyword">SQL</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,110),i=[o,l];function c(d,r){return a(),e("div",null,i)}const k=s(t,[["render",c],["__file","PostgreSQL2.html.vue"]]);export{k as default};
