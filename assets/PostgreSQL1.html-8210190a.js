import{_ as e,r as l,o as p,c as o,b as n,d as s,e as a,a as i}from"./app-25871fd1.js";const c={},d=n("h2",{id:"一、为什么使用-postgresql",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一、为什么使用-postgresql","aria-hidden":"true"},"#"),s(" 一、为什么使用 PostgreSQL")],-1),r=n("p",null,"Postgres是一个对象关系数据库，与MySQL一样快，更接近SQL标准，并且在并发性方面表现出色。Postgres在避免数据损坏方面也有优势。Postgres还提供了更高级的数据类型，并允许创建自定义类型、操作符和索引类型。",-1),u=n("p",null,"当扩展性、可伸缩性和数据完整性对你来说最重要时，Postgres通常是最好的选择。",-1),k=n("p",null,"与MySQL对比：",-1),g={href:"https://www.biaodianfu.com/mysql-vs-postgresql.html",target:"_blank",rel:"noopener noreferrer"},y=n("h2",{id:"二、windows-安装教程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#二、windows-安装教程","aria-hidden":"true"},"#"),s(" 二、Windows 安装教程：")],-1),m={href:"https://zhuanlan.zhihu.com/p/484450913",target:"_blank",rel:"noopener noreferrer"},h=n("h2",{id:"三、postgresql-语法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#三、postgresql-语法","aria-hidden":"true"},"#"),s(" 三、PostgreSQL 语法")],-1),b=n("div",{class:"custom-container info"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"INFO"),n("p",null,"关系型数据库的语法大都一样，如果你会其他的sql如MySQL，那么你会很快上手PostgreSQL。")],-1),v=i(`<h3 id="_3-1-数据类型" tabindex="-1"><a class="header-anchor" href="#_3-1-数据类型" aria-hidden="true">#</a> 3.1.数据类型</h3><h4 id="数值类型" tabindex="-1"><a class="header-anchor" href="#数值类型" aria-hidden="true">#</a> 数值类型</h4><p>数值类型由 2 字节、4 字节或 8 字节的整数以及 4 字节或 8 字节的浮点数和可选精度的十进制数组成。</p><p>下表列出了可用的数值类型。</p><table><thead><tr><th style="text-align:left;">名字</th><th style="text-align:left;">存储长度</th><th style="text-align:left;">描述</th><th style="text-align:left;">范围</th></tr></thead><tbody><tr><td style="text-align:left;">smallint</td><td style="text-align:left;">2 字节</td><td style="text-align:left;">小范围整数</td><td style="text-align:left;">-32768 到 +32767</td></tr><tr><td style="text-align:left;">integer</td><td style="text-align:left;">4 字节</td><td style="text-align:left;">常用的整数</td><td style="text-align:left;">-2147483648 到 +2147483647</td></tr><tr><td style="text-align:left;">bigint</td><td style="text-align:left;">8 字节</td><td style="text-align:left;">大范围整数</td><td style="text-align:left;">-9223372036854775808 到 +9223372036854775807</td></tr><tr><td style="text-align:left;">decimal</td><td style="text-align:left;">可变长</td><td style="text-align:left;">用户指定的精度，精确</td><td style="text-align:left;">小数点前 131072 位；小数点后 16383 位</td></tr><tr><td style="text-align:left;">numeric</td><td style="text-align:left;">可变长</td><td style="text-align:left;">用户指定的精度，精确</td><td style="text-align:left;">小数点前 131072 位；小数点后 16383 位</td></tr><tr><td style="text-align:left;">real</td><td style="text-align:left;">4 字节</td><td style="text-align:left;">可变精度，不精确</td><td style="text-align:left;">6 位十进制数字精度</td></tr><tr><td style="text-align:left;">double precision</td><td style="text-align:left;">8 字节</td><td style="text-align:left;">可变精度，不精确</td><td style="text-align:left;">15 位十进制数字精度</td></tr><tr><td style="text-align:left;">smallserial</td><td style="text-align:left;">2 字节</td><td style="text-align:left;">自增的小范围整数</td><td style="text-align:left;">1 到 32767</td></tr><tr><td style="text-align:left;">serial</td><td style="text-align:left;">4 字节</td><td style="text-align:left;">自增整数</td><td style="text-align:left;">1 到 2147483647</td></tr><tr><td style="text-align:left;">bigserial</td><td style="text-align:left;">8 字节</td><td style="text-align:left;">自增的大范围整数</td><td style="text-align:left;">1 到 9223372036854775807</td></tr></tbody></table><h4 id="字符类型" tabindex="-1"><a class="header-anchor" href="#字符类型" aria-hidden="true">#</a> 字符类型</h4><p>下表列出了 PostgreSQL 所支持的字符类型：</p><table><thead><tr><th style="text-align:left;">序号</th><th style="text-align:center;">名字 &amp; 描述</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:center;">**character varying(n), varchar(n)**变长，有长度限制</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:center;">**character(n), char(n)**f定长,不足补空白</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:center;"><strong>text</strong>变长，无长度限制</td></tr></tbody></table><h4 id="日期-时间类型" tabindex="-1"><a class="header-anchor" href="#日期-时间类型" aria-hidden="true">#</a> 日期/时间类型</h4><p>下表列出了 PostgreSQL 支持的日期和时间类型。</p><table><thead><tr><th style="text-align:left;">名字</th><th style="text-align:left;">存储空间</th><th style="text-align:left;">描述</th><th style="text-align:left;">最低值</th><th style="text-align:left;">最高值</th><th style="text-align:left;">分辨率</th></tr></thead><tbody><tr><td style="text-align:left;">timestamp [ (<em>p</em>) ] [ without time zone ]</td><td style="text-align:left;">8 字节</td><td style="text-align:left;">日期和时间(无时区)</td><td style="text-align:left;">4713 BC</td><td style="text-align:left;">294276 AD</td><td style="text-align:left;">1 毫秒 / 14 位</td></tr><tr><td style="text-align:left;">timestamp [ (<em>p</em>) ] with time zone</td><td style="text-align:left;">8 字节</td><td style="text-align:left;">日期和时间，有时区</td><td style="text-align:left;">4713 BC</td><td style="text-align:left;">294276 AD</td><td style="text-align:left;">1 毫秒 / 14 位</td></tr><tr><td style="text-align:left;">date</td><td style="text-align:left;">4 字节</td><td style="text-align:left;">只用于日期</td><td style="text-align:left;">4713 BC</td><td style="text-align:left;">5874897 AD</td><td style="text-align:left;">1 天</td></tr><tr><td style="text-align:left;">time [ (<em>p</em>) ] [ without time zone ]</td><td style="text-align:left;">8 字节</td><td style="text-align:left;">只用于一日内时间</td><td style="text-align:left;">00:00:00</td><td style="text-align:left;">24:00:00</td><td style="text-align:left;">1 毫秒 / 14 位</td></tr><tr><td style="text-align:left;">time [ (<em>p</em>) ] with time zone</td><td style="text-align:left;">12 字节</td><td style="text-align:left;">只用于一日内时间，带时区</td><td style="text-align:left;">00:00:00+1459</td><td style="text-align:left;">24:00:00-1459</td><td style="text-align:left;">1 毫秒 / 14 位</td></tr><tr><td style="text-align:left;">interval [ <em>fields</em> ] [ (<em>p</em>) ]</td><td style="text-align:left;">12 字节</td><td style="text-align:left;">时间间隔</td><td style="text-align:left;">-178000000 年</td><td style="text-align:left;">178000000 年</td><td style="text-align:left;">1 毫秒 / 14 位</td></tr></tbody></table><h4 id="布尔类型" tabindex="-1"><a class="header-anchor" href="#布尔类型" aria-hidden="true">#</a> 布尔类型</h4><p>PostgreSQL 支持标准的 boolean 数据类型。</p><p>boolean 有&quot;true&quot;(真)或&quot;false&quot;(假)两个状态， 第三种&quot;unknown&quot;(未知)状态，用 NULL 表示。</p><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">存储格式</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">boolean</td><td style="text-align:left;">1 字节</td><td style="text-align:left;">true/false</td></tr></tbody></table><h3 id="_3-2-创建表格" tabindex="-1"><a class="header-anchor" href="#_3-2-创建表格" aria-hidden="true">#</a> 3.2.创建表格</h3><p>PostgreSQL 使用 CREATE TABLE 语句来创建数据库表格。</p><h4 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h4><p><strong>CREATE TABLE</strong> 语法格式如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> table_name<span class="token punctuation">(</span>
   column1 datatype<span class="token punctuation">,</span>
   column2 datatype<span class="token punctuation">,</span>
   column3 datatype<span class="token punctuation">,</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
   columnN datatype<span class="token punctuation">,</span>
   <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span> 一个或多个列 <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>CREATE TABLE</strong> 是一个关键词，用于告诉数据库系统将创建一个数据表。</p><p>表名字必需在同一模式中的其它表、 序列、索引、视图或外部表名字中唯一。</p><p><strong>CREATE TABLE</strong> 在当前数据库创建一个新的空白表，该表将由发出此命令的用户所拥有。</p><p>表格中的每个字段都会定义数据类型，如下：</p><h4 id="实例" tabindex="-1"><a class="header-anchor" href="#实例" aria-hidden="true">#</a> 实例</h4><p>以下创建了一个表，表名为 <strong>customer</strong>表格，主键为 <strong>id</strong>，<strong>NOT NULL</strong> 表示字段不允许包含 <strong>NULL</strong> 值：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> customer<span class="token punctuation">(</span>
    first_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    last_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    company <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    street <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    city <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    state <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;PA&#39;</span><span class="token punctuation">,</span>
    zip <span class="token keyword">INTEGER</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    phone <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    birth_date <span class="token keyword">DATE</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    sex <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    date_entered <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    id <span class="token keyword">SERIAL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再来一个：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> sales_item<span class="token punctuation">(</span>
    item_id <span class="token keyword">INTEGER</span> <span class="token keyword">REFERENCES</span> item<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>
    sales_order_id <span class="token keyword">INTEGER</span> <span class="token keyword">REFERENCES</span> sales_order<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>
    quantity <span class="token keyword">INTEGER</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    discount <span class="token keyword">NUMERIC</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">,</span>
    taxable <span class="token keyword">BOOLEAN</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">FALSE</span><span class="token punctuation">,</span>
    sales_tax_rate <span class="token keyword">NUMERIC</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">,</span>
    id <span class="token keyword">SERIAL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-insert-into-语句" tabindex="-1"><a class="header-anchor" href="#_3-3-insert-into-语句" aria-hidden="true">#</a> 3.3. INSERT INTO 语句</h3><p>PostgreSQL INSERT INTO 语句用于向表中插入新记录。</p><p>我们可以插入一行也可以同时插入多行。</p><h4 id="语法-1" tabindex="-1"><a class="header-anchor" href="#语法-1" aria-hidden="true">#</a> 语法</h4><p>INSERT INTO 语句语法格式如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> TABLE_NAME <span class="token punctuation">(</span>column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> column3<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>columnN<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> value3<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>valueN<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>column1, column2,...columnN 为表中字段名。</li><li>value1, value2, value3,...valueN 为字段对应的值。</li></ul><p>在使用 INSERT INTO 语句时，字段列必须和数据值数量相同，且顺序也要对应。</p><p>如果我们向表中的所有字段插入值，则可以不需要指定字段，只需要指定插入的值即可：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> TABLE_NAME <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span>value2<span class="token punctuation">,</span>value3<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>valueN<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="实例-1" tabindex="-1"><a class="header-anchor" href="#实例-1" aria-hidden="true">#</a> 实例</h4><p>在 customer 表中插入以下数据：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> customer <span class="token punctuation">(</span>first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> company<span class="token punctuation">,</span> street<span class="token punctuation">,</span> city<span class="token punctuation">,</span> state<span class="token punctuation">,</span> zip<span class="token punctuation">,</span> phone<span class="token punctuation">,</span> birth_date<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> date_entered<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> 
<span class="token punctuation">(</span><span class="token string">&#39;Matthew&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Martinez&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;matthewmartinez@ge.com&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;GE&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;602 Main Place&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Fontana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CA&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;92336&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;117-997-7764&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1931-09-04&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;M&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2015-01-01 22:39:28&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
<span class="token punctuation">(</span><span class="token string">&#39;Melissa&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Moore&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;melissamoore@aramark.com&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Aramark&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;463 Park Rd&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Lakewood&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;NJ&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;08701&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;269-720-7259&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1967-08-27&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;M&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2017-10-20 21:59:29&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 sales_item 表中插入以下数据：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> sales_item <span class="token keyword">VALUES</span> 
<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.11</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.16</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.06</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
<span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.13</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-alter-table-语句" tabindex="-1"><a class="header-anchor" href="#_3-4-alter-table-语句" aria-hidden="true">#</a> 3.4. ALTER TABLE 语句</h3><p>在 PostgreSQL 中，<strong>ALTER TABLE</strong> 命令用于添加，修改，删除一张已经存在表的列。</p><p>另外你也可以用 <strong>ALTER TABLE</strong> 命令添加和删除约束。</p><h4 id="语法-2" tabindex="-1"><a class="header-anchor" href="#语法-2" aria-hidden="true">#</a> 语法</h4><p>用 ALTER TABLE 在一张已存在的表上添加列的语法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">ADD</span> column_name datatype<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在一张已存在的表上 DROP COLUMN（删除列），语法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">DROP</span> <span class="token keyword">COLUMN</span> column_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改表中某列的名称，语法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">ALTER</span> <span class="token keyword">COLUMN</span> old_name <span class="token keyword">TO</span> new_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改表中某列的 DATA TYPE（数据类型），语法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">ALTER</span> <span class="token keyword">COLUMN</span> column_name <span class="token keyword">TYPE</span> datatype<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>给表中某列添加 NOT NULL 约束，语法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">ALTER</span> column_name datatype <span class="token keyword">SET</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="实例-2" tabindex="-1"><a class="header-anchor" href="#实例-2" aria-hidden="true">#</a> 实例</h4><p>重命名表格</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> transaction_type <span class="token keyword">RENAME</span> <span class="token keyword">TO</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建基于单列的索引</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> transaction_id <span class="token keyword">ON</span> <span class="token keyword">transaction</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除表的数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">transaction</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除整张表</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">transaction</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-5-select-语句" tabindex="-1"><a class="header-anchor" href="#_3-5-select-语句" aria-hidden="true">#</a> 3.5. SELECT 语句</h3><p>PostgreSQL SELECT 语句用于从数据库中选取数据。</p><p>结果被存储在一个结果表中，称为结果集。</p><h4 id="语法-3" tabindex="-1"><a class="header-anchor" href="#语法-3" aria-hidden="true">#</a> 语法</h4><p>SELECT 语句语法格式如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT column1, column2,...columnN FROM table_name;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>column1, column2,...columnN 为表中字段名。</li><li>table_name 为表名。</li></ul><p>如果我们想读取表中的所有数据可以使用以下 SQL 语句：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运算符是一种告诉编译器执行特定的数学或逻辑操作的符号。</p><h3 id="_3-6-运算符" tabindex="-1"><a class="header-anchor" href="#_3-6-运算符" aria-hidden="true">#</a> 3.6.运算符</h3><p>PostgreSQL 运算符是一个保留关键字或字符，一般用在 WHERE 语句中，作为过滤条件。</p><p>常见的运算符有：</p><ul><li>算术运算符</li><li>比较运算符</li><li>逻辑运算符</li></ul><h4 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符" aria-hidden="true">#</a> 算术运算符</h4><p>假设变量 a 为 2，变量 b 为 3，则：</p><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:center;">描述</th><th style="text-align:center;">实例</th></tr></thead><tbody><tr><td style="text-align:center;">+</td><td style="text-align:center;">加</td><td style="text-align:center;">a + b 结果为 5</td></tr><tr><td style="text-align:center;">-</td><td style="text-align:center;">减</td><td style="text-align:center;">a - b 结果为 -1</td></tr><tr><td style="text-align:center;">*</td><td style="text-align:center;">乘</td><td style="text-align:center;">a * b 结果为 6</td></tr><tr><td style="text-align:center;">/</td><td style="text-align:center;">除</td><td style="text-align:center;">b / a 结果为 1</td></tr><tr><td style="text-align:center;">%</td><td style="text-align:center;">模（取余）</td><td style="text-align:center;">b % a 结果为 1</td></tr></tbody></table><h4 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符" aria-hidden="true">#</a> 比较运算符</h4><p>假设变量 a 为 10，变量 b 为 20，则：</p><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:center;">描述</th><th style="text-align:center;">实例</th></tr></thead><tbody><tr><td style="text-align:center;">=</td><td style="text-align:center;">等于</td><td style="text-align:center;">(a = b) 为 false。</td></tr><tr><td style="text-align:center;">!=</td><td style="text-align:center;">不等于</td><td style="text-align:center;">(a != b) 为 true。</td></tr><tr><td style="text-align:center;">&lt;&gt;</td><td style="text-align:center;">不等于</td><td style="text-align:center;">(a &lt;&gt; b) 为 true。</td></tr><tr><td style="text-align:center;">&gt;</td><td style="text-align:center;">大于</td><td style="text-align:center;">(a &gt; b) 为 false。</td></tr><tr><td style="text-align:center;">&lt;</td><td style="text-align:center;">小于</td><td style="text-align:center;">(a &lt; b) 为 true。</td></tr><tr><td style="text-align:center;">&gt;=</td><td style="text-align:center;">大于等于</td><td style="text-align:center;">(a &gt;= b) 为 false。</td></tr><tr><td style="text-align:center;">&lt;=</td><td style="text-align:center;">小于等于</td><td style="text-align:center;">(a &lt;= b) 为 true。</td></tr></tbody></table><h4 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h4><p>PostgreSQL 逻辑运算符有以下几种：</p><table><thead><tr><th style="text-align:left;">序号</th><th style="text-align:center;">运算符 &amp; 描述</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:center;"><strong>AND</strong>逻辑与运算符。如果两个操作数都非零，则条件为真。PostgresSQL 中的 WHERE 语句可以用 AND 包含多个过滤条件。</td></tr><tr><td style="text-align:left;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;">2</td><td style="text-align:center;"><strong>NOT</strong>逻辑非运算符。用来逆转操作数的逻辑状态。如果条件为真则逻辑非运算符将使其为假。PostgresSQL 有 NOT EXISTS, NOT BETWEEN, NOT IN 等运算符。</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:center;"><strong>OR</strong>逻辑或运算符。如果两个操作数中有任意一个非零，则条件为真。PostgresSQL 中的 WHERE 语句可以用 OR 包含多个过滤条件。</td></tr></tbody></table><h4 id="and-实例" tabindex="-1"><a class="header-anchor" href="#and-实例" aria-hidden="true">#</a> AND 实例</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> time_order_taken
<span class="token keyword">FROM</span> sales_order
<span class="token keyword">WHERE</span> time_order_taken <span class="token operator">&gt;</span> <span class="token string">&#39;2018-12-01&#39;</span> <span class="token operator">AND</span> time_order_taken <span class="token operator">&lt;</span> <span class="token string">&#39;2018-12-31&#39;</span><span class="token punctuation">;</span>
 
<span class="token comment">-- You can use BETWEEN to get the same results</span>
 
<span class="token keyword">SELECT</span> time_order_taken
<span class="token keyword">FROM</span> sales_order
<span class="token keyword">WHERE</span> time_order_taken <span class="token operator">BETWEEN</span> <span class="token string">&#39;2018-12-01&#39;</span> <span class="token operator">AND</span> <span class="token string">&#39;2018-12-31&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,92);function x(f,E){const t=l("ExternalLinkIcon");return p(),o("div",null,[d,r,u,k,n("blockquote",null,[n("p",null,[n("a",g,[s("MySQL与PostgreSQL哪个更好？ – 标点符 (biaodianfu.com)"),a(t)])])]),y,n("blockquote",null,[n("p",null,[n("a",m,[s("Windows 10平台安装PostgreSQL 14.2详细教程 - 知乎 (zhihu.com)"),a(t)])])]),h,b,v])}const w=e(c,[["render",x],["__file","PostgreSQL1.html.vue"]]);export{w as default};
