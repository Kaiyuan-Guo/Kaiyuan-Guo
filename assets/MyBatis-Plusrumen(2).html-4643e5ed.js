import{_ as p,o as t,c as e,e as a,a as n,b as s}from"./app-43b264b6.js";const o={},c=a('<h2 id="_1-扩展功能" tabindex="-1"><a class="header-anchor" href="#_1-扩展功能" aria-hidden="true">#</a> 1.扩展功能</h2><h3 id="_1-1-代码生成" tabindex="-1"><a class="header-anchor" href="#_1-1-代码生成" aria-hidden="true">#</a> 1.1.代码生成</h3><p>在使用MybatisPlus以后，基础的<code>Mapper</code>、<code>Service</code>、<code>PO</code>代码相对固定，重复编写也比较麻烦。因此MybatisPlus官方提供了代码生成器根据数据库表结构生成<code>PO</code>、<code>Mapper</code>、<code>Service</code>等相关代码。只不过代码生成器同样要编码使用，也很麻烦。</p><p>这里推荐大家使用一款<code>MybatisPlus</code>的插件，它可以基于图形化界面完成<code>MybatisPlus</code>的代码生成，非常简单。</p><h4 id="_1-1-1-安装插件" tabindex="-1"><a class="header-anchor" href="#_1-1-1-安装插件" aria-hidden="true">#</a> 1.1.1.安装插件</h4><p>在<code>Idea</code>的plugins市场中搜索并安装<code>MyBatisPlus</code>插件： <img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1688091751297-6918cbf6-d2c2-4ae1-a88e-05b53deeb007.png#averageHue=%23f6f5f5&amp;clientId=uea9a4aab-c071-4&amp;from=paste&amp;height=618&amp;id=u6048bc70&amp;originHeight=766&amp;originWidth=1507&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=107031&amp;status=done&amp;style=none&amp;taskId=u820e9b5e-098b-47f6-8ff5-fd30fe3b308&amp;title=&amp;width=1215.7310534651604" alt="image.png"></p><p>然后重启你的Idea即可使用。</p><h4 id="_1-1-2-使用" tabindex="-1"><a class="header-anchor" href="#_1-1-2-使用" aria-hidden="true">#</a> 1.1.2.使用</h4><p>刚好数据库中还有一张address表尚未生成对应的实体和mapper等基础代码。我们利用插件生成一下。 首先需要配置数据库地址，在Idea顶部菜单中，找到<code>other</code>，选择<code>Config Database</code>： <img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1688196733527-e4bc1921-cc23-4f8c-92f9-b917ec261523.png#averageHue=%23d9ceb7&amp;clientId=ucb5715c2-9b63-4&amp;from=paste&amp;height=190&amp;id=u1be4369c&amp;originHeight=236&amp;originWidth=1221&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=37503&amp;status=done&amp;style=none&amp;taskId=u6232584f-51f8-4184-8a55-86890ee8ade&amp;title=&amp;width=985.0083717856409" alt="image.png"></p><p>在弹出的窗口中填写数据库连接的基本信息： <img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1688196793381-60acee0a-500e-4b4d-8b3b-aa4cd3af80c8.png#averageHue=%23f4f4f4&amp;clientId=ucb5715c2-9b63-4&amp;from=paste&amp;height=317&amp;id=u4cc24dc2&amp;originHeight=393&amp;originWidth=629&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=17584&amp;status=done&amp;style=none&amp;taskId=ud0ec4100-04a0-443a-bc58-9a65002e9fe&amp;title=&amp;width=507.4285551622998" alt="image.png"></p><p>点击OK保存。</p><p>然后再次点击Idea顶部菜单中的other，然后选择<code>Code Generator</code>: <img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1688196861061-152ee240-f56d-47a3-9c74-7fc67a82dd17.png#averageHue=%23d7cbb2&amp;clientId=ucb5715c2-9b63-4&amp;from=paste&amp;height=153&amp;id=u30692977&amp;originHeight=190&amp;originWidth=1109&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=31203&amp;status=done&amp;style=none&amp;taskId=u8299bd93-3309-486f-bd92-3804ced967f&amp;title=&amp;width=894.6554335055492" alt="image.png"></p><p>在弹出的表单中填写信息： <img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1688197265415-9a6942d2-b53f-4788-aa90-d2308690c8c6.png#averageHue=%23f3e9e8&amp;clientId=ucb5715c2-9b63-4&amp;from=paste&amp;height=489&amp;id=u319836cf&amp;originHeight=606&amp;originWidth=1376&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=129466&amp;status=done&amp;style=none&amp;taskId=u0e1d05ee-af06-445f-9ad7-8769e084e36&amp;title=&amp;width=1110.050384583982" alt="image.png"></p><p>最终，代码自动生成到指定的位置了： <img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1688197328813-48e7bdf4-ba7d-437d-8613-7af6862bdbdb.png#averageHue=%23f9fbf7&amp;clientId=ucb5715c2-9b63-4&amp;from=paste&amp;height=603&amp;id=u49498134&amp;originHeight=747&amp;originWidth=767&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=76873&amp;status=done&amp;style=none&amp;taskId=u05eaf9ab-2683-41be-b24b-f2814c48bc5&amp;title=&amp;width=618.756282685984" alt="image.png"></p><h3 id="_1-2-逻辑删除" tabindex="-1"><a class="header-anchor" href="#_1-2-逻辑删除" aria-hidden="true">#</a> 1.2.逻辑删除</h3><p>对于一些比较重要的数据，我们往往会采用逻辑删除的方案，即：</p><ul><li>在表中添加一个字段标记数据是否被删除</li><li>当删除数据时把标记置为true</li><li>查询时过滤掉标记为true的数据</li></ul><p>一旦采用了逻辑删除，所有的查询和删除逻辑都要跟着变化，非常麻烦。为了解决这个问题，MybatisPlus就添加了对逻辑删除的支持。</p>',18),i=n("div",{class:"custom-container warning"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8v4"}),n("path",{d:"M12 16h.01"})])]),n("p",{class:"custom-container-title"},"WARNING"),n("p",null,[n("strong",null,"注意"),s("，只有MybatisPlus生成的SQL语句才支持自动的逻辑删除，自定义SQL需要自己手动处理逻辑删除。")])],-1),l=a(`<p>例如，我们给<code>address</code>表添加一个逻辑删除字段：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> address
	<span class="token keyword">add</span> deleted <span class="token keyword">bit</span> <span class="token keyword">default</span> b<span class="token string">&#39;0&#39;</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;逻辑删除&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后给<code>Address</code>实体添加<code>deleted</code>字段： <img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1688202948723-552f1db1-84ad-4b78-99ee-28ac6f2f5159.png#averageHue=%23f6f8f3&amp;clientId=ucb5715c2-9b63-4&amp;from=paste&amp;height=389&amp;id=ua4217141&amp;originHeight=482&amp;originWidth=856&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=53297&amp;status=done&amp;style=none&amp;taskId=u2aa3f980-e287-47b8-8b36-3ccbc249d3a&amp;title=&amp;width=690.5545997121282" alt="image.png"></p><p>接下来，我们要在<code>application.yml</code>中配置逻辑删除字段：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>
  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>
    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>
      <span class="token key atrule">logic-delete-field</span><span class="token punctuation">:</span> deleted <span class="token comment"># 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)</span>
      <span class="token key atrule">logic-delete-value</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 逻辑已删除值(默认为 1)</span>
      <span class="token key atrule">logic-not-delete-value</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment"># 逻辑未删除值(默认为 0)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试： 首先，我们执行一个删除操作：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testDeleteByLogic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 删除方法与以前没有区别</span>
    addressService<span class="token punctuation">.</span><span class="token function">removeById</span><span class="token punctuation">(</span><span class="token number">59L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法与普通删除一模一样，但是底层的SQL逻辑变了： <img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1688203124731-99a02bc4-df99-4bcf-a38d-4ebf0e82bf6b.png#averageHue=%23f9fcf7&amp;clientId=ucb5715c2-9b63-4&amp;from=paste&amp;height=312&amp;id=uc2faa0ed&amp;originHeight=387&amp;originWidth=1347&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=141086&amp;status=done&amp;style=none&amp;taskId=u07bf156e-f27f-452a-ad3d-64f60e95502&amp;title=&amp;width=1086.6554273507438" alt="image.png"></p><p>查询一下试试：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Address</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> addressService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会发现id为59的确实没有查询出来，而且SQL中也对逻辑删除字段做了判断： <img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1688203269018-391c8134-3442-43a8-893f-08f562155ae7.png#averageHue=%23f9fcf7&amp;clientId=ucb5715c2-9b63-4&amp;from=paste&amp;height=452&amp;id=uedd32412&amp;originHeight=560&amp;originWidth=1328&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=233822&amp;status=done&amp;style=none&amp;taskId=ub7380c63-d002-4cad-a704-6bf18ff3948&amp;title=&amp;width=1071.3276967496568" alt="image.png"></p><p>综上， 开启了逻辑删除功能以后，我们就可以像普通删除一样做CRUD，基本不用考虑代码逻辑问题。还是非常方便的。</p>`,12),u=n("div",{class:"custom-container warning"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8v4"}),n("path",{d:"M12 16h.01"})])]),n("p",{class:"custom-container-title"},"WARNING"),n("p",null,[n("strong",null,"注意"),s("： 逻辑删除本身也有自己的问题，比如：")]),n("ul",null,[n("li",null,"会导致数据库表垃圾数据越来越多，从而影响查询效率"),n("li",null,"SQL中全都需要对逻辑删除字段做判断，影响查询效率")]),n("p",null,"因此，虎哥不太推荐采用逻辑删除功能，如果数据不能删除，可以采用把数据迁移到其它表的办法。")],-1),r=a(`<h3 id="_1-3-通用枚举" tabindex="-1"><a class="header-anchor" href="#_1-3-通用枚举" aria-hidden="true">#</a> 1.3.通用枚举</h3><p>User类中有一个用户状态字段： <img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1688205450700-35d2bce8-ec2d-42f2-8977-bd7ebf101afd.png#averageHue=%23f5f7f4&amp;clientId=ucdd19af3-b6b9-4&amp;from=paste&amp;height=349&amp;id=u29e826cf&amp;originHeight=432&amp;originWidth=688&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=47157&amp;status=done&amp;style=none&amp;taskId=u2b1c794b-d20f-478d-aeff-87d6913e1f2&amp;title=&amp;width=555.025192291991" alt="image.png"></p><p>像这种字段我们一般会定义一个枚举，做业务判断的时候就可以直接基于枚举做比较。但是我们数据库采用的是<code>int</code>类型，对应的PO也是<code>Integer</code>。因此业务操作时必须手动把<code>枚举</code>与<code>Integer</code>转换，非常麻烦。</p><p>因此，MybatisPlus提供了一个处理枚举的类型转换器，可以帮我们<strong>把枚举类型与数据库类型自动转换</strong>。</p><h4 id="_1-3-1-定义枚举" tabindex="-1"><a class="header-anchor" href="#_1-3-1-定义枚举" aria-hidden="true">#</a> 1.3.1.定义枚举</h4><p>我们定义一个用户状态的枚举： <img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1688206435536-1e0ebd0f-4185-4e4b-8dc8-8b2dab235f44.png#averageHue=%23f9fbf8&amp;clientId=ucdd19af3-b6b9-4&amp;from=paste&amp;height=403&amp;id=uf7e016c3&amp;originHeight=499&amp;originWidth=915&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=53038&amp;status=done&amp;style=none&amp;taskId=u5e55ee20-4f76-4516-b0f2-c1a81d103fc&amp;title=&amp;width=738.1512368418192" alt="image.png"></p><p>代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>mp<span class="token punctuation">.</span>enums</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnumValue</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Getter</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">UserStatus</span> <span class="token punctuation">{</span>
    <span class="token function">NORMAL</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;正常&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">FREEZE</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;冻结&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>

    <span class="token class-name">UserStatus</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后把<code>User</code>类中的<code>status</code>字段改为<code>UserStatus</code> 类型： <img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1688207388430-424b3be8-4c08-4c31-aa73-7b41e271a760.png#averageHue=%23f6f7f2&amp;clientId=ucdd19af3-b6b9-4&amp;from=paste&amp;height=340&amp;id=ua014304a&amp;originHeight=422&amp;originWidth=714&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=47282&amp;status=done&amp;style=none&amp;taskId=u2e238813-09bf-4ab7-8ddf-8c8f581014c&amp;title=&amp;width=575.9999815355836" alt="image.png"></p><p>要让<code>MybatisPlus</code>处理枚举与数据库类型自动转换，我们必须告诉<code>MybatisPlus</code>，枚举中的哪个字段的值作为数据库值。 <code>MybatisPlus</code>提供了<code>@EnumValue</code>注解来标记枚举属性： <img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1688206653554-4bc9d7a3-3c39-4981-a8ba-6f06ba7df734.png#averageHue=%23f8fbf6&amp;clientId=ucdd19af3-b6b9-4&amp;from=paste&amp;height=418&amp;id=ua72da7b8&amp;originHeight=518&amp;originWidth=635&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=67892&amp;status=done&amp;style=none&amp;taskId=ua1ac546f-70cf-4525-a941-afce46f09a2&amp;title=&amp;width=512.2688911415904" alt="image.png"></p><h4 id="_1-3-2-配置枚举处理器" tabindex="-1"><a class="header-anchor" href="#_1-3-2-配置枚举处理器" aria-hidden="true">#</a> 1.3.2.配置枚举处理器</h4><p>在application.yaml文件中添加配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>
  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>
    <span class="token key atrule">default-enum-type-handler</span><span class="token punctuation">:</span> com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-3-3-测试" tabindex="-1"><a class="header-anchor" href="#_1-3-3-测试" aria-hidden="true">#</a> 1.3.3.测试</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终，查询出的<code>User</code>类的<code>status</code>字段会是枚举类型： <img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1688207514989-da3d683d-641b-4a05-8330-ec1818604dd4.png#averageHue=%23f7faf3&amp;clientId=ucdd19af3-b6b9-4&amp;from=paste&amp;height=272&amp;id=u5c65f589&amp;originHeight=337&amp;originWidth=758&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=70020&amp;status=done&amp;style=none&amp;taskId=ub88fd551-ea20-4385-9696-bc4800cc4d4&amp;title=&amp;width=611.4957787170481" alt="image.png"></p><h3 id="_1-4-字段类型处理器" tabindex="-1"><a class="header-anchor" href="#_1-4-字段类型处理器" aria-hidden="true">#</a> 1.4.字段类型处理器</h3><p>数据库的user表中有一个<code>info</code>字段，是JSON类型： <img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1688212092835-57dab221-e046-48f4-907a-d3bf18fc2a30.png#averageHue=%23f7f6f4&amp;clientId=ucdd19af3-b6b9-4&amp;from=paste&amp;height=245&amp;id=u3dcab959&amp;originHeight=304&amp;originWidth=761&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=31811&amp;status=done&amp;style=none&amp;taskId=ubba2f760-5128-4d52-9412-f54fceaf94a&amp;title=&amp;width=613.9159467066934" alt="image.png"> 格式像这样：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token property">&quot;intro&quot;</span><span class="token operator">:</span> <span class="token string">&quot;佛系青年&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;gender&quot;</span><span class="token operator">:</span> <span class="token string">&quot;male&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而目前<code>User</code>实体类中却是<code>String</code>类型： <img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1688212175474-81e91aec-2ef3-4305-9dc6-28d20e139688.png#averageHue=%23f5f8f4&amp;clientId=ucdd19af3-b6b9-4&amp;from=paste&amp;height=310&amp;id=u65d78d1d&amp;originHeight=384&amp;originWidth=814&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=46824&amp;status=done&amp;style=none&amp;taskId=u674ba30b-a2fd-4c65-9c1f-acc92e124de&amp;title=&amp;width=656.6722478570939" alt="image.png"></p><p>这样以来，我们要读取info中的属性时就非常不方便。如果要方便获取，info的类型最好是一个<code>Map</code>或者实体类。 而一旦我们把<code>info</code>改为<code>对象</code>类型，就需要在写入数据库是手动转为<code>String</code>，再读取数据库时，手动转换为<code>对象</code>，这会非常麻烦。</p><p>因此MybatisPlus提供了很多特殊类型字段的类型处理器，解决特殊字段类型与数据库类型转换的问题。例如处理JSON就可以使用<code>JacksonTypeHandler</code>处理器。</p><p>接下来，我们就来看看这个处理器该如何使用。</p><h4 id="_1-4-1-定义实体" tabindex="-1"><a class="header-anchor" href="#_1-4-1-定义实体" aria-hidden="true">#</a> 1.4.1.定义实体</h4><p>首先，我们定义一个单独实体类来与info字段的属性匹配： <img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1688215509372-226dae45-89f8-46e5-9cf2-a2d94dafebda.png#averageHue=%23f9fbf8&amp;clientId=ucdd19af3-b6b9-4&amp;from=paste&amp;height=353&amp;id=u6e9cbd35&amp;originHeight=437&amp;originWidth=860&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=44479&amp;status=done&amp;style=none&amp;taskId=u3ef96d28-bf45-4adb-9583-cf6c2ce9cf8&amp;title=&amp;width=693.7814903649886" alt="image.png"></p><p>代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>mp<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>po</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> intro<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> gender<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-4-2-使用类型处理器" tabindex="-1"><a class="header-anchor" href="#_1-4-2-使用类型处理器" aria-hidden="true">#</a> 1.4.2.使用类型处理器</h4><p>接下来，将User类的info字段修改为UserInfo类型，并声明类型处理器： <img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1688215729313-c3987a13-e3fe-40f6-8028-e837fdfbee63.png#averageHue=%23f6f8f4&amp;clientId=ucdd19af3-b6b9-4&amp;from=paste&amp;height=309&amp;id=u6e6612c3&amp;originHeight=383&amp;originWidth=978&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=49918&amp;status=done&amp;style=none&amp;taskId=u6a82025a-637a-4a02-bd01-036a53384b2&amp;title=&amp;width=788.9747646243708" alt="image.png"></p><p>测试可以发现，所有数据都正确封装到UserInfo当中了： <img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1688215838909-45e8286d-85f4-4521-bede-9d3c8e8be109.png#averageHue=%23f9fbf6&amp;clientId=ucdd19af3-b6b9-4&amp;from=paste&amp;height=278&amp;id=u822a8e35&amp;originHeight=345&amp;originWidth=1034&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=92222&amp;status=done&amp;style=none&amp;taskId=u80ecd7f1-8bf6-4609-8484-22a05c2093f&amp;title=&amp;width=834.1512337644166" alt="image.png"></p><h3 id="_1-5-配置加密" tabindex="-1"><a class="header-anchor" href="#_1-5-配置加密" aria-hidden="true">#</a> 1.5.配置加密</h3><p>目前我们配置文件中的很多参数都是明文，如果开发人员发生流动，很容易导致敏感信息的泄露。所以MybatisPlus支持配置文件的加密和解密功能。</p><p>我们以数据库的用户名和密码为例。</p><h4 id="_1-5-1-生成秘钥" tabindex="-1"><a class="header-anchor" href="#_1-5-1-生成秘钥" aria-hidden="true">#</a> 1.5.1.生成秘钥</h4><p>首先，我们利用AES工具生成一个随机秘钥，然后对用户名、密码加密：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>mp</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>toolkit<span class="token punctuation">.</span></span><span class="token class-name">AES</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MpDemoApplicationTests</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 生成 16 位随机 AES 密钥</span>
        <span class="token class-name">String</span> randomKey <span class="token operator">=</span> <span class="token constant">AES</span><span class="token punctuation">.</span><span class="token function">generateRandomKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;randomKey = &quot;</span> <span class="token operator">+</span> randomKey<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 利用密钥对用户名加密</span>
        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token constant">AES</span><span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span> randomKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;username = &quot;</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 利用密钥对用户名加密</span>
        <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token constant">AES</span><span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token string">&quot;MySQL123&quot;</span><span class="token punctuation">,</span> randomKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;password = &quot;</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印结果如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>randomKey <span class="token operator">=</span> <span class="token number">6234633</span>a66fb399f
username <span class="token operator">=</span> px2bAbnUfiY8K<span class="token operator">/</span><span class="token class-name">IgsKvscg</span><span class="token operator">==</span>
password <span class="token operator">=</span> <span class="token class-name">FGvCSEaOuga3ulDAsxw68Q</span><span class="token operator">==</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-5-2-修改配置" tabindex="-1"><a class="header-anchor" href="#_1-5-2-修改配置" aria-hidden="true">#</a> 1.5.2.修改配置</h4><p>修改application.yaml文件，把jdbc的用户名、密码修改为刚刚加密生成的密文：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/mp<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai&amp;rewriteBatchedStatements=true</span>
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
    <span class="token key atrule">username</span><span class="token punctuation">:</span> mpw<span class="token punctuation">:</span>QWWVnk1Oal3258x5rVhaeQ== <span class="token comment"># 密文要以 mpw:开头</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span> mpw<span class="token punctuation">:</span>EUFmeH3cNAzdRGdOQcabWg== <span class="token comment"># 密文要以 mpw:开头</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-5-3-测试" tabindex="-1"><a class="header-anchor" href="#_1-5-3-测试" aria-hidden="true">#</a> 1.5.3.测试</h4><p>在启动项目的时候，需要把刚才生成的秘钥添加到启动参数中，像这样：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">-</span><span class="token punctuation">-</span>mpw.key=6234633a66fb399f
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>单元测试的时候不能添加启动参数，所以要在测试类的注解上配置： <img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1688218131368-7bba8307-998f-4709-86d1-b5f83d0b363d.png#averageHue=%23f5f7f3&amp;clientId=ucdd19af3-b6b9-4&amp;from=paste&amp;height=392&amp;id=u0b3b23da&amp;originHeight=486&amp;originWidth=1089&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=87247&amp;status=done&amp;style=none&amp;taskId=ue867a34c-18ac-488a-b0c9-a77bdf4d99a&amp;title=&amp;width=878.5209802412472" alt="image.png"></p><p>然后随意运行一个单元测试，可以发现数据库查询正常。</p><h2 id="_2-插件功能" tabindex="-1"><a class="header-anchor" href="#_2-插件功能" aria-hidden="true">#</a> 2.插件功能</h2><p>MybatisPlus提供了很多的插件功能，进一步拓展其功能。目前已有的插件有：</p><ul><li><code>PaginationInnerInterceptor</code>：自动分页</li><li><code>TenantLineInnerInterceptor</code>：多租户</li><li><code>DynamicTableNameInnerInterceptor</code>：动态表名</li><li><code>OptimisticLockerInnerInterceptor</code>：乐观锁</li><li><code>IllegalSQLInnerInterceptor</code>：sql 性能规范</li><li><code>BlockAttackInnerInterceptor</code>：防止全表更新与删除</li></ul>`,49),d=n("div",{class:"custom-container warning"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8v4"}),n("path",{d:"M12 16h.01"})])]),n("p",{class:"custom-container-title"},"WARNING"),n("p",null,[n("strong",null,"注意："),s(" 使用多个分页插件的时候需要注意插件定义顺序，建议使用顺序如下：")]),n("ul",null,[n("li",null,"多租户,动态表名"),n("li",null,"分页,乐观锁"),n("li",null,"sql 性能规范,防止全表更新与删除")])],-1),k=a(`<p>这里我们以分页插件为里来学习插件的用法。</p><h3 id="_2-1-分页插件" tabindex="-1"><a class="header-anchor" href="#_2-1-分页插件" aria-hidden="true">#</a> 2.1.分页插件</h3><p>在未引入分页插件的情况下，<code>MybatisPlus</code>是不支持分页功能的，<code>IService</code>和<code>BaseMapper</code>中的分页方法都无法正常起效。 所以，我们必须配置分页插件。</p><h4 id="_2-1-1-配置分页插件" tabindex="-1"><a class="header-anchor" href="#_2-1-1-配置分页插件" aria-hidden="true">#</a> 2.1.1.配置分页插件</h4><p>在项目中新建一个配置类： <img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1688220120678-5d7b8c50-05f8-48f0-b32b-21a4e34dc56f.png#averageHue=%23f9fbf8&amp;clientId=ucdd19af3-b6b9-4&amp;from=paste&amp;height=327&amp;id=u5dedcfcd&amp;originHeight=405&amp;originWidth=896&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=42888&amp;status=done&amp;style=none&amp;taskId=ufe639d17-598b-40d7-b932-3133320d017&amp;title=&amp;width=722.8235062407323" alt="image.png"></p><p>其代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>mp<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">DbType</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span></span><span class="token class-name">MybatisPlusInterceptor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>inner<span class="token punctuation">.</span></span><span class="token class-name">PaginationInnerInterceptor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 初始化核心插件</span>
        <span class="token class-name">MybatisPlusInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 添加分页插件</span>
        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token class-name">DbType</span><span class="token punctuation">.</span><span class="token constant">MYSQL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-2-分页api" tabindex="-1"><a class="header-anchor" href="#_2-1-2-分页api" aria-hidden="true">#</a> 2.1.2.分页API</h4><p>编写一个分页查询的测试：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testPageQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.分页查询，new Page()的两个参数分别是：页码、每页大小</span>
    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.总条数</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;total = &quot;</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3.总页数</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;pages = &quot;</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">getPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 4.数据</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> records <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    records<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行的SQL如下： <img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1688220648583-06cf029a-4d8e-4002-8b07-dc4db3787fa4.png#averageHue=%23f9fcf7&amp;clientId=ucdd19af3-b6b9-4&amp;from=paste&amp;height=649&amp;id=u381c4f60&amp;originHeight=805&amp;originWidth=1336&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=300593&amp;status=done&amp;style=none&amp;taskId=u05c9d87e-599a-4d44-8b0c-62900316533&amp;title=&amp;width=1077.7814780553776" alt="image.png"></p><p>这里用到了分页参数，Page，即可以支持分页参数，也可以支持排序参数。常见的API如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> pageNo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> pageSize <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token comment">// 分页参数</span>
<span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token class-name">Page</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>pageNo<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 排序参数, 通过OrderItem来指定</span>
page<span class="token punctuation">.</span><span class="token function">addOrder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderItem</span><span class="token punctuation">(</span><span class="token string">&quot;balance&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

userService<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-通用分页实体" tabindex="-1"><a class="header-anchor" href="#_2-2-通用分页实体" aria-hidden="true">#</a> 2.2.通用分页实体</h3><p>现在要实现一个用户分页查询的接口，接口规范如下：</p><table><thead><tr><th><strong>参数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>请求方式</td><td>GET</td></tr><tr><td>请求路径</td><td>/users/page</td></tr><tr><td>特殊说明</td><td>如果排序字段为空，默认按照更新时间排序。排序字段不为空，则按照排序字段排序</td></tr></tbody></table><p>请求参数：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;pageNo&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token property">&quot;pageSize&quot;</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
    <span class="token property">&quot;sortBy&quot;</span><span class="token operator">:</span> <span class="token string">&quot;balance&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;isAsc&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回值：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;total&quot;</span><span class="token operator">:</span> <span class="token number">100006</span><span class="token punctuation">,</span>
    <span class="token property">&quot;pages&quot;</span><span class="token operator">:</span> <span class="token number">50003</span><span class="token punctuation">,</span>
    <span class="token property">&quot;list&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1685100878975279298</span><span class="token punctuation">,</span>
            <span class="token property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;user_9****&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;info&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>
                <span class="token property">&quot;intro&quot;</span><span class="token operator">:</span> <span class="token string">&quot;英文老师&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;gender&quot;</span><span class="token operator">:</span> <span class="token string">&quot;female&quot;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token string">&quot;正常&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;balance&quot;</span><span class="token operator">:</span> <span class="token number">2000</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1685100878975279299</span><span class="token punctuation">,</span>
            <span class="token property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;user_9****&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;info&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>
                <span class="token property">&quot;intro&quot;</span><span class="token operator">:</span> <span class="token string">&quot;英文老师&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;gender&quot;</span><span class="token operator">:</span> <span class="token string">&quot;female&quot;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token string">&quot;正常&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;balance&quot;</span><span class="token operator">:</span> <span class="token number">2000</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里需要定义3个实体：</p><ul><li><code>PageQuery</code>：分页查询条件的实体，包含分页、排序参数</li><li><code>PageDTO</code>：分页结果实体，包含总条数、总页数、当前页数据</li><li><code>UserVO</code>：用户页面视图实体</li></ul><p>接下来我们就按照WEB开发的过程来实现这个接口。 首先，我们在项目中引入<code>spring-boot-starter-web</code>依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- web依赖 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- hutool 工具包--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.8.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，按<code>alt+8</code>打开<code>service</code>控制台，然后添加一个<code>SpringBoot</code>启动项： <img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1688286132717-ae9c6f4d-61a4-4b67-8da1-f4a8a7087ad7.png#averageHue=%23eff2ee&amp;clientId=uba0f15c0-624d-4&amp;from=paste&amp;height=361&amp;id=uc2971250&amp;originHeight=448&amp;originWidth=1127&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=61466&amp;status=done&amp;style=none&amp;taskId=u5c9cacfa-5ca3-4210-8749-71b5221414d&amp;title=&amp;width=909.1764414434211" alt="image.png"></p><p>弹窗中选择<code>Spring Boot</code>： <img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1688286160462-818bf344-ed58-4ad5-b8aa-68948ce07025.png#averageHue=%23f5f4f2&amp;clientId=uba0f15c0-624d-4&amp;from=paste&amp;height=465&amp;id=u2345aaa0&amp;originHeight=576&amp;originWidth=314&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=37539&amp;status=done&amp;style=none&amp;taskId=u18919e97-fda7-4d6b-88cf-71ffc02b73f&amp;title=&amp;width=253.31091624954234" alt="image.png"></p><p>弹窗中填写信息： <img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1688286326883-b48cd164-9f97-413f-9b8d-b88cb6fff6f4.png#averageHue=%23f3f1f1&amp;clientId=uba0f15c0-624d-4&amp;from=paste&amp;height=608&amp;id=u7ac5c1e6&amp;originHeight=754&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=63187&amp;status=done&amp;style=none&amp;taskId=u8236bb84-f4d7-4993-94d6-676e7bc2812&amp;title=&amp;width=1129.4117285011444" alt="image.png"></p><p>其中不要忘了配置我们之前添加的数据加密的秘钥。</p><h4 id="_2-2-1-实体" tabindex="-1"><a class="header-anchor" href="#_2-2-1-实体" aria-hidden="true">#</a> 2.2.1.实体</h4><p>首先是请求参数的<code>PageQuery</code>实体： <img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1690626203583-31dc37fe-6851-4aad-9438-8e1ebef5ce46.png#averageHue=%23f9fbf8&amp;clientId=uacc03b97-2f4b-4&amp;from=paste&amp;height=428&amp;id=u6de6995d&amp;originHeight=530&amp;originWidth=842&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=52422&amp;status=done&amp;style=none&amp;taskId=u0d14f487-0e76-4433-aa87-a89efcba08e&amp;title=&amp;width=679.2604824271168" alt="image.png"></p><p><code>PageQuery</code>是前端提交的查询参数，一般包含四个属性：</p><ul><li><code>pageNo</code>：页码</li><li><code>pageSize</code>：每页数据条数</li><li><code>sortBy</code>：排序字段</li><li><code>isAsc</code>：是否升序</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>mp<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>query</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PageQuery</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> pageNo<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> pageSize<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> sortBy<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> isAsc<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们定义一个<code>UserVO</code>实体： <img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1690626250731-71aa58a9-80af-4191-91e7-e22c21ada79a.png#averageHue=%23f9fbf8&amp;clientId=uacc03b97-2f4b-4&amp;from=paste&amp;height=355&amp;id=u6a9535f1&amp;originHeight=440&amp;originWidth=834&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=42155&amp;status=done&amp;style=none&amp;taskId=ue520cb52-d625-447c-9e92-e2cd2ef7153&amp;title=&amp;width=672.8067011213959" alt="image.png"></p><p>代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>mp<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>vo</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>mp<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>po<span class="token punctuation">.</span></span><span class="token class-name">UserInfo</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>mp<span class="token punctuation">.</span>enums<span class="token punctuation">.</span></span><span class="token class-name">UserStatus</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserVO</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 用户id
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 用户名
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 详细信息
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">UserInfo</span> info<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 使用状态（1正常 2冻结）
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">UserStatus</span> status<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 账户余额
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> balance<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，则是分页实体PageDTO: <img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1690626340460-6e86f884-5110-47b9-a6ca-429d3bcb9e47.png#averageHue=%23f9fbf8&amp;clientId=uacc03b97-2f4b-4&amp;from=paste&amp;height=403&amp;id=u4b113cac&amp;originHeight=499&amp;originWidth=900&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=48491&amp;status=done&amp;style=none&amp;taskId=ubd543d13-2a93-47cb-afc3-2884221e2f7&amp;title=&amp;width=726.0503968935927" alt="image.png"></p><p>代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>mp<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>dto</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> total<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> pages<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-2-开发接口" tabindex="-1"><a class="header-anchor" href="#_2-2-2-开发接口" aria-hidden="true">#</a> 2.2.2.开发接口</h4><p>我们定义一个<code>UserController</code>，在<code>controller</code>中我们定义分页查询用户的接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>mp<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>mp<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>dto<span class="token punctuation">.</span></span><span class="token class-name">PageDTO</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>mp<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">PageQuery</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>mp<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">UserVO</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>mp<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">UserService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">RequiredArgsConstructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/page&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryUserByPage</span><span class="token punctuation">(</span><span class="token class-name">PageQuery</span> query<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">queryUserByPage</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在<code>UserService</code>中创建<code>queryUserByPage</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryUserByPage</span><span class="token punctuation">(</span><span class="token class-name">PageQuery</span> query<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，在UserServiceImpl中实现该方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryUserByPage</span><span class="token punctuation">(</span><span class="token class-name">PageQuery</span> query<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.构建条件</span>
    <span class="token comment">// 1.1.分页条件</span>
    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token class-name">Page</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">getPageNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> query<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 1.2.排序条件</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">getSortBy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        page<span class="token punctuation">.</span><span class="token function">addOrder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderItem</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">getSortBy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> query<span class="token punctuation">.</span><span class="token function">getIsAsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token comment">// 默认按照更新时间排序</span>
        page<span class="token punctuation">.</span><span class="token function">addOrder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderItem</span><span class="token punctuation">(</span><span class="token string">&quot;update_time&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 2.查询</span>
    <span class="token function">page</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3.数据非空校验</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> records <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>records <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> records<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 无数据，返回空结果</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> page<span class="token punctuation">.</span><span class="token function">getPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 4.有数据，转换</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserVO</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">copyToList</span><span class="token punctuation">(</span>records<span class="token punctuation">,</span> <span class="token class-name">UserVO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 5.封装返回</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserVO</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> page<span class="token punctuation">.</span><span class="token function">getPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，为了让UserStatus枚举可以展示为文字描述，再给UserStatus中的desc字段添加<code>@JsonValue</code>注解： <img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1690626889628-2c81911b-a714-410e-9cdf-76aa27946746.png#averageHue=%23f9fbf6&amp;clientId=uacc03b97-2f4b-4&amp;from=paste&amp;height=443&amp;id=ud16fa160&amp;originHeight=549&amp;originWidth=751&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=74054&amp;status=done&amp;style=none&amp;taskId=u4d9fbbd2-ddee-48f9-9d79-30479deee8d&amp;title=&amp;width=605.8487200745424" alt="image.png"></p><p>启动项目，在页面查看： <img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1690626977575-46df0c79-8d99-4965-a1fa-7ef4379f81ba.png#averageHue=%23f8f8fe&amp;clientId=uacc03b97-2f4b-4&amp;from=paste&amp;height=603&amp;id=uc72ff4b0&amp;originHeight=748&amp;originWidth=749&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=77622&amp;status=done&amp;style=none&amp;taskId=u0c90cc4d-4b96-48bb-89b9-fe1fe18fa6f&amp;title=&amp;width=604.2352747481121" alt="image.png"></p><h4 id="_2-2-3-改造pagequery实体" tabindex="-1"><a class="header-anchor" href="#_2-2-3-改造pagequery实体" aria-hidden="true">#</a> 2.2.3.改造PageQuery实体</h4><p>在刚才的代码中，从<code>PageQuery</code>到<code>MybatisPlus</code>的<code>Page</code>之间转换的过程还是比较麻烦的。 我们完全可以在<code>PageQuery</code>这个实体中定义一个工具方法，简化开发。 像这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>mp<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>query</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span></span><span class="token class-name">OrderItem</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>pagination<span class="token punctuation">.</span></span><span class="token class-name">Page</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PageQuery</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> pageNo<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> pageSize<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> sortBy<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> isAsc<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>  <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">toMpPage</span><span class="token punctuation">(</span><span class="token class-name">OrderItem</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> orders<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 1.分页条件</span>
        <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> <span class="token class-name">Page</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>pageNo<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.排序条件</span>
        <span class="token comment">// 2.1.先看前端有没有传排序字段</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sortBy <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            p<span class="token punctuation">.</span><span class="token function">addOrder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderItem</span><span class="token punctuation">(</span>sortBy<span class="token punctuation">,</span> isAsc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> p<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 2.2.再看有没有手动指定排序字段</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>orders <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            p<span class="token punctuation">.</span><span class="token function">addOrder</span><span class="token punctuation">(</span>orders<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> p<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">toMpPage</span><span class="token punctuation">(</span><span class="token class-name">String</span> defaultSortBy<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isAsc<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toMpPage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderItem</span><span class="token punctuation">(</span>defaultSortBy<span class="token punctuation">,</span> isAsc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">toMpPageDefaultSortByCreateTimeDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">toMpPage</span><span class="token punctuation">(</span><span class="token string">&quot;create_time&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">toMpPageDefaultSortByUpdateTimeDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">toMpPage</span><span class="token punctuation">(</span><span class="token string">&quot;update_time&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们在开发也时就可以省去对从<code>PageQuery</code>到<code>Page</code>的的转换：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1.构建条件</span>
<span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">toMpPageDefaultSortByCreateTimeDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-4-改造pagedto实体" tabindex="-1"><a class="header-anchor" href="#_2-2-4-改造pagedto实体" aria-hidden="true">#</a> 2.2.4.改造PageDTO实体</h4><p>在查询出分页结果后，数据的非空校验，数据的vo转换都是模板代码，编写起来很麻烦。</p><p>我们完全可以将其封装到PageDTO的工具方法中，简化整个过程：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>mp<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>dto</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">BeanUtil</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>pagination<span class="token punctuation">.</span></span><span class="token class-name">Page</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">Function</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collectors</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> total<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> pages<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 返回空分页结果
     * <span class="token keyword">@param</span> <span class="token parameter">p</span> MybatisPlus的分页结果
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>V<span class="token punctuation">&gt;</span></span> 目标VO类型
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>P<span class="token punctuation">&gt;</span></span> 原始PO类型
     * <span class="token keyword">@return</span> VO的分页对象
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">P</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">P</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">getPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 将MybatisPlus分页结果转为 VO分页结果
     * <span class="token keyword">@param</span> <span class="token parameter">p</span> MybatisPlus的分页结果
     * <span class="token keyword">@param</span> <span class="token parameter">voClass</span> 目标VO类型的字节码
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>V<span class="token punctuation">&gt;</span></span> 目标VO类型
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>P<span class="token punctuation">&gt;</span></span> 原始PO类型
     * <span class="token keyword">@return</span> VO的分页对象
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">P</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">P</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> voClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1.非空校验</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">P</span><span class="token punctuation">&gt;</span></span> records <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>records <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> records<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 无数据，返回空结果</span>
            <span class="token keyword">return</span> <span class="token function">empty</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 2.数据转换</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> vos <span class="token operator">=</span> <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">copyToList</span><span class="token punctuation">(</span>records<span class="token punctuation">,</span> voClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3.封装返回</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">getPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 将MybatisPlus分页结果转为 VO分页结果，允许用户自定义PO到VO的转换方式
     * <span class="token keyword">@param</span> <span class="token parameter">p</span> MybatisPlus的分页结果
     * <span class="token keyword">@param</span> <span class="token parameter">convertor</span> PO到VO的转换函数
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>V<span class="token punctuation">&gt;</span></span> 目标VO类型
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>P<span class="token punctuation">&gt;</span></span> 原始PO类型
     * <span class="token keyword">@return</span> VO的分页对象
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">P</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">P</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">P</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> convertor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1.非空校验</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">P</span><span class="token punctuation">&gt;</span></span> records <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>records <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> records<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 无数据，返回空结果</span>
            <span class="token keyword">return</span> <span class="token function">empty</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 2.数据转换</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> vos <span class="token operator">=</span> records<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>convertor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3.封装返回</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">getPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终，业务层的代码可以简化为：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryUserByPage</span><span class="token punctuation">(</span><span class="token class-name">PageQuery</span> query<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.构建条件</span>
    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">toMpPageDefaultSortByCreateTimeDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.查询</span>
    <span class="token function">page</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3.封装返回</span>
    <span class="token keyword">return</span> <span class="token class-name">PageDTO</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> <span class="token class-name">UserVO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是希望自定义PO到VO的转换过程，可以这样做：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryUserByPage</span><span class="token punctuation">(</span><span class="token class-name">PageQuery</span> query<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.构建条件</span>
    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">toMpPageDefaultSortByCreateTimeDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.查询</span>
    <span class="token function">page</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3.封装返回</span>
    <span class="token keyword">return</span> <span class="token class-name">PageDTO</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> user <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 拷贝属性到VO</span>
        <span class="token class-name">UserVO</span> vo <span class="token operator">=</span> <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token class-name">UserVO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 用户名脱敏</span>
        <span class="token class-name">String</span> username <span class="token operator">=</span> vo<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vo<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> username<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> vo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终查询的结果如下： <img src="https://cdn.nlark.com/yuque/0/2023/png/27967491/1688291665223-e96361ac-d315-4d39-b54a-9c54083665f2.png#averageHue=%23f8f9fe&amp;clientId=uba0f15c0-624d-4&amp;from=paste&amp;height=614&amp;id=u88be7c7b&amp;originHeight=761&amp;originWidth=891&amp;originalType=binary&amp;ratio=1.2395833730697632&amp;rotation=0&amp;showTitle=false&amp;size=74030&amp;status=done&amp;style=none&amp;taskId=u44f43f7a-6fb4-4c98-92bf-32cd49ec211&amp;title=&amp;width=718.7898929246568" alt="image.png"></p>`,62),m=[c,i,l,u,r,d,k];function v(g,b){return t(),e("div",null,m)}const y=p(o,[["render",v],["__file","MyBatis-Plusrumen(2).html.vue"]]);export{y as default};
